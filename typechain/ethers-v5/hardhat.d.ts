/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Migrations",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Migrations__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "ERC20Custom",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Custom__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "AggregatorV3Interface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AggregatorV3Interface__factory>;
    getContractFactory(
      name: "ChainlinkETHUSDPriceConsumer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ChainlinkETHUSDPriceConsumer__factory>;
    getContractFactory(
      name: "UniswapPairOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapPairOracle__factory>;
    getContractFactory(
      name: "WUSDOracleWrapper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WUSDOracleWrapper__factory>;
    getContractFactory(
      name: "Owned",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Owned__factory>;
    getContractFactory(
      name: "SCAMP_Bank",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WUSDPool__factory>;
    getContractFactory(
      name: "WUSDPoolLibrary",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WUSDPoolLibrary__factory>;
    getContractFactory(
      name: "IUniswapV2Callee",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Callee__factory>;
    getContractFactory(
      name: "IUniswapV2ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2ERC20__factory>;
    getContractFactory(
      name: "IUniswapV2Factory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Factory__factory>;
    getContractFactory(
      name: "IUniswapV2Pair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Pair__factory>;
    getContractFactory(
      name: "IUniswapV2Router01",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Router01__factory>;
    getContractFactory(
      name: "IUniswapV2Router02",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Router02__factory>;
    getContractFactory(
      name: "SwapToPrice",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SwapToPrice__factory>;
    getContractFactory(
      name: "UniswapV2ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapV2ERC20__factory>;
    getContractFactory(
      name: "SCAMP",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SCAMP__factory>;
    getContractFactory(
      name: "WeMadeFuture",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WeMadeFuture__factory>;
    getContractFactory(
      name: "BondDepository",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BondDepository__factory>;
    getContractFactory(
      name: "BondTreasury",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BondTreasury__factory>;
    getContractFactory(
      name: "ClaimSwapBondZap",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ClaimSwapBondZap__factory>;
    getContractFactory(
      name: "ClaimSwapKlayKbtLpDepository",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ClaimSwapKlayKbtLpDepository__factory>;
    getContractFactory(
      name: "IBondDepository",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBondDepository__factory>;
    getContractFactory(
      name: "IBondTreasury",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBondTreasury__factory>;
    getContractFactory(
      name: "IClaimSwapFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IClaimSwapFactory__factory>;
    getContractFactory(
      name: "IClaimSwapPair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IClaimSwapPair__factory>;
    getContractFactory(
      name: "IClaimSwapZap",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IClaimSwapZap__factory>;
    getContractFactory(
      name: "IOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOracle__factory>;
    getContractFactory(
      name: "IStakedToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStakedToken__factory>;
    getContractFactory(
      name: "IOwnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOwnable__factory>;
    getContractFactory(
      name: "IERC2612Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC2612Permit__factory>;
    getContractFactory(
      name: "IKIP7",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IKIP7__factory>;
    getContractFactory(
      name: "IKIP7Detailed",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IKIP7Detailed__factory>;
    getContractFactory(
      name: "KIP7",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.KIP7__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "Migrations",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Migrations__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "ERC20Custom",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Custom__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "AggregatorV3Interface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AggregatorV3Interface__factory>;
    getContractFactory(
      name: "ChainlinkETHUSDPriceConsumer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ChainlinkETHUSDPriceConsumer__factory>;
    getContractFactory(
      name: "UniswapPairOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapPairOracle__factory>;
    getContractFactory(
      name: "WUSDOracleWrapper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WUSDOracleWrapper__factory>;
    getContractFactory(
      name: "Owned",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Owned__factory>;
    getContractFactory(
      name: "SCAMP_Bank",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WUSDPool__factory>;
    getContractFactory(
      name: "WUSDPoolLibrary",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WUSDPoolLibrary__factory>;
    getContractFactory(
      name: "IGovernancePowerDelegationToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGovernancePowerDelegationToken__factory>;
    getContractFactory(
      name: "IKIP7",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IKIP7__factory>;
    getContractFactory(
      name: "IKIP7Detailed",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IKIP7Detailed__factory>;
    getContractFactory(
      name: "IKIP7WithNonce",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IKIP7WithNonce__factory>;
    getContractFactory(
      name: "IKlaybankDistributionManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IKlaybankDistributionManager__factory>;
    getContractFactory(
      name: "IKlaybankIncentivesController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IKlaybankIncentivesController__factory>;
    getContractFactory(
      name: "IScaledBalanceToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IScaledBalanceToken__factory>;
    getContractFactory(
      name: "IStakedToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStakedToken__factory>;
    getContractFactory(
      name: "IStakedTokenWithConfig",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStakedTokenWithConfig__factory>;
    getContractFactory(
      name: "ITransferHook",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITransferHook__factory>;
    getContractFactory(
      name: "BaseAdminUpgradeabilityProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseAdminUpgradeabilityProxy__factory>;
    getContractFactory(
      name: "BaseUpgradeabilityProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseUpgradeabilityProxy__factory>;
    getContractFactory(
      name: "GovernancePowerDelegationKIP7",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernancePowerDelegationKIP7__factory>;
    getContractFactory(
      name: "GovernancePowerWithSnapshot",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernancePowerWithSnapshot__factory>;
    getContractFactory(
      name: "InitializableAdminUpgradeabilityProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.InitializableAdminUpgradeabilityProxy__factory>;
    getContractFactory(
      name: "InitializableUpgradeabilityProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.InitializableUpgradeabilityProxy__factory>;
    getContractFactory(
      name: "KIP7",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.KIP7__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Proxy__factory>;
    getContractFactory(
      name: "UpgradeabilityProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UpgradeabilityProxy__factory>;
    getContractFactory(
      name: "KlaybankDistributionManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.KlaybankDistributionManager__factory>;
    getContractFactory(
      name: "KlaybankEcosystemReserve",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.KlaybankEcosystemReserve__factory>;
    getContractFactory(
      name: "KlaybankIncentivesController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.KlaybankIncentivesController__factory>;
    getContractFactory(
      name: "StakedKbt",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StakedKbt__factory>;
    getContractFactory(
      name: "StakedToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StakedToken__factory>;
    getContractFactory(
      name: "IUniswapV2Callee",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Callee__factory>;
    getContractFactory(
      name: "IUniswapV2ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2ERC20__factory>;
    getContractFactory(
      name: "IUniswapV2Factory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Factory__factory>;
    getContractFactory(
      name: "IUniswapV2Pair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Pair__factory>;
    getContractFactory(
      name: "IUniswapV2Router01",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Router01__factory>;
    getContractFactory(
      name: "IUniswapV2Router02",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Router02__factory>;
    getContractFactory(
      name: "SwapToPrice",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SwapToPrice__factory>;
    getContractFactory(
      name: "UniswapV2ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapV2ERC20__factory>;
    getContractFactory(
      name: "SCAMP",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SCAMP__factory>;
    getContractFactory(
      name: "WeMadeFuture",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WeMadeFuture__factory>;

    getContractAt(
      name: "Migrations",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Migrations>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "ERC20Custom",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Custom>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "AggregatorV3Interface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AggregatorV3Interface>;
    getContractAt(
      name: "ChainlinkETHUSDPriceConsumer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ChainlinkETHUSDPriceConsumer>;
    getContractAt(
      name: "UniswapPairOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapPairOracle>;
    getContractAt(
      name: "WUSDOracleWrapper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WUSDOracleWrapper>;
    getContractAt(
      name: "Owned",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Owned>;
    getContractAt(
      name: "SCAMP_Bank",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SCAMP_Bank>;
    getContractAt(
      name: "WUSDPoolLibrary",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WUSDPoolLibrary>;
    getContractAt(
      name: "IUniswapV2Callee",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Callee>;
    getContractAt(
      name: "IUniswapV2ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2ERC20>;
    getContractAt(
      name: "IUniswapV2Factory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Factory>;
    getContractAt(
      name: "IUniswapV2Pair",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Pair>;
    getContractAt(
      name: "IUniswapV2Router01",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Router01>;
    getContractAt(
      name: "IUniswapV2Router02",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Router02>;
    getContractAt(
      name: "SwapToPrice",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SwapToPrice>;
    getContractAt(
      name: "UniswapV2ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapV2ERC20>;
    getContractAt(
      name: "SCAMP",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SCAMP>;
    getContractAt(
      name: "WeMadeFuture",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WeMadeFuture>;
    getContractAt(
      name: "BondDepository",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BondDepository>;
    getContractAt(
      name: "BondTreasury",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BondTreasury>;
    getContractAt(
      name: "ClaimSwapBondZap",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ClaimSwapBondZap>;
    getContractAt(
      name: "ClaimSwapKlayKbtLpDepository",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ClaimSwapKlayKbtLpDepository>;
    getContractAt(
      name: "IBondDepository",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBondDepository>;
    getContractAt(
      name: "IBondTreasury",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBondTreasury>;
    getContractAt(
      name: "IClaimSwapFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IClaimSwapFactory>;
    getContractAt(
      name: "IClaimSwapPair",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IClaimSwapPair>;
    getContractAt(
      name: "IClaimSwapZap",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IClaimSwapZap>;
    getContractAt(
      name: "IOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IOracle>;
    getContractAt(
      name: "IStakedToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStakedToken>;
    getContractAt(
      name: "IOwnable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IOwnable>;
    getContractAt(
      name: "IERC2612Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC2612Permit>;
    getContractAt(
      name: "IKIP7",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IKIP7>;
    getContractAt(
      name: "IKIP7Detailed",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IKIP7Detailed>;
    getContractAt(
      name: "KIP7",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.KIP7>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "Migrations",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Migrations>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "ERC20Custom",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Custom>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "AggregatorV3Interface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AggregatorV3Interface>;
    getContractAt(
      name: "ChainlinkETHUSDPriceConsumer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ChainlinkETHUSDPriceConsumer>;
    getContractAt(
      name: "UniswapPairOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapPairOracle>;
    getContractAt(
      name: "WUSDOracleWrapper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WUSDOracleWrapper>;
    getContractAt(
      name: "Owned",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Owned>;
    getContractAt(
      name: "SCAMP_Bank",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SCAMP_Bank>;
    getContractAt(
      name: "WUSDPoolLibrary",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WUSDPoolLibrary>;
    getContractAt(
      name: "IGovernancePowerDelegationToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGovernancePowerDelegationToken>;
    getContractAt(
      name: "IKIP7",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IKIP7>;
    getContractAt(
      name: "IKIP7Detailed",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IKIP7Detailed>;
    getContractAt(
      name: "IKIP7WithNonce",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IKIP7WithNonce>;
    getContractAt(
      name: "IKlaybankDistributionManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IKlaybankDistributionManager>;
    getContractAt(
      name: "IKlaybankIncentivesController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IKlaybankIncentivesController>;
    getContractAt(
      name: "IScaledBalanceToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IScaledBalanceToken>;
    getContractAt(
      name: "IStakedToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStakedToken>;
    getContractAt(
      name: "IStakedTokenWithConfig",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStakedTokenWithConfig>;
    getContractAt(
      name: "ITransferHook",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITransferHook>;
    getContractAt(
      name: "BaseAdminUpgradeabilityProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseAdminUpgradeabilityProxy>;
    getContractAt(
      name: "BaseUpgradeabilityProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseUpgradeabilityProxy>;
    getContractAt(
      name: "GovernancePowerDelegationKIP7",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GovernancePowerDelegationKIP7>;
    getContractAt(
      name: "GovernancePowerWithSnapshot",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GovernancePowerWithSnapshot>;
    getContractAt(
      name: "InitializableAdminUpgradeabilityProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.InitializableAdminUpgradeabilityProxy>;
    getContractAt(
      name: "InitializableUpgradeabilityProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.InitializableUpgradeabilityProxy>;
    getContractAt(
      name: "KIP7",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.KIP7>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "Proxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Proxy>;
    getContractAt(
      name: "UpgradeabilityProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UpgradeabilityProxy>;
    getContractAt(
      name: "KlaybankDistributionManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.KlaybankDistributionManager>;
    getContractAt(
      name: "KlaybankEcosystemReserve",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.KlaybankEcosystemReserve>;
    getContractAt(
      name: "KlaybankIncentivesController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.KlaybankIncentivesController>;
    getContractAt(
      name: "StakedKbt",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StakedKbt>;
    getContractAt(
      name: "StakedToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StakedToken>;
    getContractAt(
      name: "IUniswapV2Callee",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Callee>;
    getContractAt(
      name: "IUniswapV2ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2ERC20>;
    getContractAt(
      name: "IUniswapV2Factory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Factory>;
    getContractAt(
      name: "IUniswapV2Pair",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Pair>;
    getContractAt(
      name: "IUniswapV2Router01",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Router01>;
    getContractAt(
      name: "IUniswapV2Router02",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Router02>;
    getContractAt(
      name: "SwapToPrice",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SwapToPrice>;
    getContractAt(
      name: "UniswapV2ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapV2ERC20>;
    getContractAt(
      name: "SCAMP",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SCAMP>;
    getContractAt(
      name: "WeMadeFuture",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WeMadeFuture>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
