/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface StakedKbtInterface extends ethers.utils.Interface {
  functions: {
    "DELEGATE_BY_TYPE_TYPEHASH()": FunctionFragment;
    "DELEGATE_TYPEHASH()": FunctionFragment;
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "EIP712_REVISION()": FunctionFragment;
    "EMISSION_MANAGER()": FunctionFragment;
    "GOVERNANCE_TOKEN()": FunctionFragment;
    "HEATUP_SECONDS()": FunctionFragment;
    "PERCENTAGE_FACTOR()": FunctionFragment;
    "PERMIT_TYPEHASH()": FunctionFragment;
    "PRECISION()": FunctionFragment;
    "REVISION()": FunctionFragment;
    "REWARDS_VAULT()": FunctionFragment;
    "SECONDS_OF_ONE_MONTH()": FunctionFragment;
    "UNSTAKE_WINDOW()": FunctionFragment;
    "_klaybankGovernance()": FunctionFragment;
    "_nonces(address)": FunctionFragment;
    "_votingSnapshots(address,uint256)": FunctionFragment;
    "_votingSnapshotsCounts(address)": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "assets(address)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "claimRewards(address,uint256)": FunctionFragment;
    "configureAsset(uint256[],uint16)": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "delegate(address)": FunctionFragment;
    "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "delegateByType(address,uint8)": FunctionFragment;
    "delegateByTypeBySig(address,uint8,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "getAssetData(address)": FunctionFragment;
    "getDelegateeByType(address,uint8)": FunctionFragment;
    "getDistributionEndTimestamp(address)": FunctionFragment;
    "getDistributionStartTimestamp(address)": FunctionFragment;
    "getNextHeatupTimestamp(uint256,uint256,address,uint256)": FunctionFragment;
    "getPowerAtBlock(address,uint256,uint8)": FunctionFragment;
    "getPowerCurrent(address,uint8)": FunctionFragment;
    "getStakedTokenRewardRatio()": FunctionFragment;
    "getTotalRewardsBalance(address)": FunctionFragment;
    "getUserAssetData(address,address)": FunctionFragment;
    "heatup()": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "initialize(address,string,string,uint8,address,uint16,uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "redeem(address,uint256)": FunctionFragment;
    "setDistributionStartTimestamp(address,uint256)": FunctionFragment;
    "setKlaybankGovernance(address)": FunctionFragment;
    "setStakedTokenRewardRatio(uint16)": FunctionFragment;
    "stake(address,uint256)": FunctionFragment;
    "stakeAndActivateHeatup(uint256)": FunctionFragment;
    "stakedToken()": FunctionFragment;
    "stakerRewardsToClaim(address)": FunctionFragment;
    "stakersHeatups(address)": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "totalSupplyAt(uint256)": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DELEGATE_BY_TYPE_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DELEGATE_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EIP712_REVISION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EMISSION_MANAGER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GOVERNANCE_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "HEATUP_SECONDS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERCENTAGE_FACTOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERMIT_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "PRECISION", values?: undefined): string;
  encodeFunctionData(functionFragment: "REVISION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "REWARDS_VAULT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SECONDS_OF_ONE_MONTH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UNSTAKE_WINDOW",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_klaybankGovernance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_nonces", values: [string]): string;
  encodeFunctionData(
    functionFragment: "_votingSnapshots",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_votingSnapshotsCounts",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "assets", values: [string]): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "claimRewards",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "configureAsset",
    values: [BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "delegate", values: [string]): string;
  encodeFunctionData(
    functionFragment: "delegateBySig",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "delegateByType",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "delegateByTypeBySig",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAssetData",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getDelegateeByType",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDistributionEndTimestamp",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getDistributionStartTimestamp",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getNextHeatupTimestamp",
    values: [BigNumberish, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPowerAtBlock",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPowerCurrent",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakedTokenRewardRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalRewardsBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserAssetData",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "heatup", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      string,
      string,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "permit",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDistributionStartTimestamp",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setKlaybankGovernance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setStakedTokenRewardRatio",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeAndActivateHeatup",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakedToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakerRewardsToClaim",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "stakersHeatups",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupplyAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "DELEGATE_BY_TYPE_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DELEGATE_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EIP712_REVISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EMISSION_MANAGER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GOVERNANCE_TOKEN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "HEATUP_SECONDS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERCENTAGE_FACTOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERMIT_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "PRECISION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "REVISION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "REWARDS_VAULT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SECONDS_OF_ONE_MONTH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UNSTAKE_WINDOW",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_klaybankGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_nonces", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_votingSnapshots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_votingSnapshotsCounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "assets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "configureAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "delegate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "delegateBySig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegateByType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegateByTypeBySig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAssetData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDelegateeByType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDistributionEndTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDistributionStartTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextHeatupTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPowerAtBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPowerCurrent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakedTokenRewardRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalRewardsBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserAssetData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "heatup", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDistributionStartTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setKlaybankGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStakedTokenRewardRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakeAndActivateHeatup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakerRewardsToClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakersHeatups",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupplyAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "AssetConfigUpdated(address,uint256[],uint16)": EventFragment;
    "AssetIndexUpdated(address,uint256)": EventFragment;
    "DelegateChanged(address,address,uint8)": EventFragment;
    "DelegatedPowerChanged(address,uint256,uint8)": EventFragment;
    "DistributionEndUpdated(uint256)": EventFragment;
    "DistributionStartUpdated(uint256)": EventFragment;
    "Heatup(address)": EventFragment;
    "Redeem(address,address,uint256)": EventFragment;
    "RewardsAccrued(address,uint256)": EventFragment;
    "RewardsClaimed(address,address,uint256,uint256)": EventFragment;
    "SetKlaybankGovernance(address)": EventFragment;
    "Staked(address,address,uint256)": EventFragment;
    "StakedTokenRewardRatioChanged(uint16)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "UserIndexUpdated(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssetConfigUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssetIndexUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DelegateChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DelegatedPowerChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DistributionEndUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DistributionStartUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Heatup"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Redeem"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsAccrued"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetKlaybankGovernance"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Staked"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "StakedTokenRewardRatioChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserIndexUpdated"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber] & {
    owner: string;
    spender: string;
    value: BigNumber;
  }
>;

export type AssetConfigUpdatedEvent = TypedEvent<
  [string, BigNumber[], number] & {
    asset: string;
    monthlyEmissionPerSecond: BigNumber[];
    shareRatio: number;
  }
>;

export type AssetIndexUpdatedEvent = TypedEvent<
  [string, BigNumber] & { asset: string; index: BigNumber }
>;

export type DelegateChangedEvent = TypedEvent<
  [string, string, number] & {
    delegator: string;
    delegatee: string;
    delegationType: number;
  }
>;

export type DelegatedPowerChangedEvent = TypedEvent<
  [string, BigNumber, number] & {
    user: string;
    amount: BigNumber;
    delegationType: number;
  }
>;

export type DistributionEndUpdatedEvent = TypedEvent<
  [BigNumber] & { newDistributionEnd: BigNumber }
>;

export type DistributionStartUpdatedEvent = TypedEvent<
  [BigNumber] & { newDistributionStart: BigNumber }
>;

export type HeatupEvent = TypedEvent<[string] & { user: string }>;

export type RedeemEvent = TypedEvent<
  [string, string, BigNumber] & { from: string; to: string; amount: BigNumber }
>;

export type RewardsAccruedEvent = TypedEvent<
  [string, BigNumber] & { user: string; amount: BigNumber }
>;

export type RewardsClaimedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber] & {
    from: string;
    to: string;
    stakedTokenAmount: BigNumber;
    governanceTokenAmount: BigNumber;
  }
>;

export type SetKlaybankGovernanceEvent = TypedEvent<
  [string] & { klaybankGovernance: string }
>;

export type StakedEvent = TypedEvent<
  [string, string, BigNumber] & {
    from: string;
    onBehalfOf: string;
    amount: BigNumber;
  }
>;

export type StakedTokenRewardRatioChangedEvent = TypedEvent<
  [number] & { stakedTokenReward: number }
>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber] & { from: string; to: string; value: BigNumber }
>;

export type UserIndexUpdatedEvent = TypedEvent<
  [string, string, BigNumber] & {
    user: string;
    asset: string;
    index: BigNumber;
  }
>;

export class StakedKbt extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: StakedKbtInterface;

  functions: {
    DELEGATE_BY_TYPE_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    DELEGATE_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    EIP712_REVISION(overrides?: CallOverrides): Promise<[string]>;

    EMISSION_MANAGER(overrides?: CallOverrides): Promise<[string]>;

    GOVERNANCE_TOKEN(overrides?: CallOverrides): Promise<[string]>;

    HEATUP_SECONDS(overrides?: CallOverrides): Promise<[BigNumber]>;

    PERCENTAGE_FACTOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    PRECISION(overrides?: CallOverrides): Promise<[number]>;

    REVISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    REWARDS_VAULT(overrides?: CallOverrides): Promise<[string]>;

    SECONDS_OF_ONE_MONTH(overrides?: CallOverrides): Promise<[BigNumber]>;

    UNSTAKE_WINDOW(overrides?: CallOverrides): Promise<[BigNumber]>;

    _klaybankGovernance(overrides?: CallOverrides): Promise<[string]>;

    _nonces(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    _votingSnapshots(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { blockNumber: BigNumber; value: BigNumber }
    >;

    _votingSnapshotsCounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    assets(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, BigNumber, BigNumber] & {
        index: BigNumber;
        shareRatio: number;
        lastUpdateTimestamp: BigNumber;
        distributionStartTimestamp: BigNumber;
      }
    >;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    claimRewards(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    configureAsset(
      monthlyEmissionPerSecond: BigNumberish[],
      shareRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    delegate(
      delegatee: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    delegateBySig(
      delegatee: string,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    delegateByType(
      delegatee: string,
      delegationType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    delegateByTypeBySig(
      delegatee: string,
      delegationType: BigNumberish,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAssetData(
      asset: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber[], number, BigNumber, BigNumber]>;

    getDelegateeByType(
      delegator: string,
      delegationType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getDistributionEndTimestamp(
      asset: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getDistributionStartTimestamp(
      asset: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getNextHeatupTimestamp(
      fromHeatupTimestamp: BigNumberish,
      amountToReceive: BigNumberish,
      toAddress: string,
      toBalance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPowerAtBlock(
      user: string,
      blockNumber: BigNumberish,
      delegationType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPowerCurrent(
      user: string,
      delegationType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getStakedTokenRewardRatio(overrides?: CallOverrides): Promise<[number]>;

    getTotalRewardsBalance(
      staker: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUserAssetData(
      user: string,
      asset: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    heatup(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      klaybankGovernance: string,
      tokenName: string,
      tokenSymbol: string,
      tokenDecimals: BigNumberish,
      stakedTokenAddress: string,
      stakedTokenRewardRatio: BigNumberish,
      chainId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeem(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDistributionStartTimestamp(
      asset: string,
      distributionStartTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setKlaybankGovernance(
      klaybankGovernance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStakedTokenRewardRatio(
      stakedTokenRewardRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stake(
      onBehalfOf: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakeAndActivateHeatup(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakedToken(overrides?: CallOverrides): Promise<[string]>;

    stakerRewardsToClaim(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    stakersHeatups(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupplyAt(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  DELEGATE_BY_TYPE_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  DELEGATE_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  EIP712_REVISION(overrides?: CallOverrides): Promise<string>;

  EMISSION_MANAGER(overrides?: CallOverrides): Promise<string>;

  GOVERNANCE_TOKEN(overrides?: CallOverrides): Promise<string>;

  HEATUP_SECONDS(overrides?: CallOverrides): Promise<BigNumber>;

  PERCENTAGE_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

  PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  PRECISION(overrides?: CallOverrides): Promise<number>;

  REVISION(overrides?: CallOverrides): Promise<BigNumber>;

  REWARDS_VAULT(overrides?: CallOverrides): Promise<string>;

  SECONDS_OF_ONE_MONTH(overrides?: CallOverrides): Promise<BigNumber>;

  UNSTAKE_WINDOW(overrides?: CallOverrides): Promise<BigNumber>;

  _klaybankGovernance(overrides?: CallOverrides): Promise<string>;

  _nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  _votingSnapshots(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { blockNumber: BigNumber; value: BigNumber }
  >;

  _votingSnapshotsCounts(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  assets(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number, BigNumber, BigNumber] & {
      index: BigNumber;
      shareRatio: number;
      lastUpdateTimestamp: BigNumber;
      distributionStartTimestamp: BigNumber;
    }
  >;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  claimRewards(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  configureAsset(
    monthlyEmissionPerSecond: BigNumberish[],
    shareRatio: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  delegate(
    delegatee: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  delegateBySig(
    delegatee: string,
    nonce: BigNumberish,
    expiry: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  delegateByType(
    delegatee: string,
    delegationType: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  delegateByTypeBySig(
    delegatee: string,
    delegationType: BigNumberish,
    nonce: BigNumberish,
    expiry: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAssetData(
    asset: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber[], number, BigNumber, BigNumber]>;

  getDelegateeByType(
    delegator: string,
    delegationType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getDistributionEndTimestamp(
    asset: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDistributionStartTimestamp(
    asset: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNextHeatupTimestamp(
    fromHeatupTimestamp: BigNumberish,
    amountToReceive: BigNumberish,
    toAddress: string,
    toBalance: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPowerAtBlock(
    user: string,
    blockNumber: BigNumberish,
    delegationType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPowerCurrent(
    user: string,
    delegationType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getStakedTokenRewardRatio(overrides?: CallOverrides): Promise<number>;

  getTotalRewardsBalance(
    staker: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUserAssetData(
    user: string,
    asset: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  heatup(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    klaybankGovernance: string,
    tokenName: string,
    tokenSymbol: string,
    tokenDecimals: BigNumberish,
    stakedTokenAddress: string,
    stakedTokenRewardRatio: BigNumberish,
    chainId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  permit(
    owner: string,
    spender: string,
    value: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeem(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDistributionStartTimestamp(
    asset: string,
    distributionStartTimestamp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setKlaybankGovernance(
    klaybankGovernance: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStakedTokenRewardRatio(
    stakedTokenRewardRatio: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stake(
    onBehalfOf: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakeAndActivateHeatup(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakedToken(overrides?: CallOverrides): Promise<string>;

  stakerRewardsToClaim(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  stakersHeatups(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupplyAt(
    blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DELEGATE_BY_TYPE_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    DELEGATE_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    EIP712_REVISION(overrides?: CallOverrides): Promise<string>;

    EMISSION_MANAGER(overrides?: CallOverrides): Promise<string>;

    GOVERNANCE_TOKEN(overrides?: CallOverrides): Promise<string>;

    HEATUP_SECONDS(overrides?: CallOverrides): Promise<BigNumber>;

    PERCENTAGE_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    PRECISION(overrides?: CallOverrides): Promise<number>;

    REVISION(overrides?: CallOverrides): Promise<BigNumber>;

    REWARDS_VAULT(overrides?: CallOverrides): Promise<string>;

    SECONDS_OF_ONE_MONTH(overrides?: CallOverrides): Promise<BigNumber>;

    UNSTAKE_WINDOW(overrides?: CallOverrides): Promise<BigNumber>;

    _klaybankGovernance(overrides?: CallOverrides): Promise<string>;

    _nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    _votingSnapshots(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { blockNumber: BigNumber; value: BigNumber }
    >;

    _votingSnapshotsCounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    assets(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, BigNumber, BigNumber] & {
        index: BigNumber;
        shareRatio: number;
        lastUpdateTimestamp: BigNumber;
        distributionStartTimestamp: BigNumber;
      }
    >;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    claimRewards(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    configureAsset(
      monthlyEmissionPerSecond: BigNumberish[],
      shareRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    delegate(delegatee: string, overrides?: CallOverrides): Promise<void>;

    delegateBySig(
      delegatee: string,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    delegateByType(
      delegatee: string,
      delegationType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    delegateByTypeBySig(
      delegatee: string,
      delegationType: BigNumberish,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    getAssetData(
      asset: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber[], number, BigNumber, BigNumber]>;

    getDelegateeByType(
      delegator: string,
      delegationType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getDistributionEndTimestamp(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDistributionStartTimestamp(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNextHeatupTimestamp(
      fromHeatupTimestamp: BigNumberish,
      amountToReceive: BigNumberish,
      toAddress: string,
      toBalance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPowerAtBlock(
      user: string,
      blockNumber: BigNumberish,
      delegationType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPowerCurrent(
      user: string,
      delegationType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakedTokenRewardRatio(overrides?: CallOverrides): Promise<number>;

    getTotalRewardsBalance(
      staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserAssetData(
      user: string,
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    heatup(overrides?: CallOverrides): Promise<void>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      klaybankGovernance: string,
      tokenName: string,
      tokenSymbol: string,
      tokenDecimals: BigNumberish,
      stakedTokenAddress: string,
      stakedTokenRewardRatio: BigNumberish,
      chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    redeem(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setDistributionStartTimestamp(
      asset: string,
      distributionStartTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setKlaybankGovernance(
      klaybankGovernance: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setStakedTokenRewardRatio(
      stakedTokenRewardRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stake(
      onBehalfOf: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stakeAndActivateHeatup(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stakedToken(overrides?: CallOverrides): Promise<string>;

    stakerRewardsToClaim(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakersHeatups(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupplyAt(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; spender: string; value: BigNumber }
    >;

    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; spender: string; value: BigNumber }
    >;

    "AssetConfigUpdated(address,uint256[],uint16)"(
      asset?: string | null,
      monthlyEmissionPerSecond?: null,
      shareRatio?: null
    ): TypedEventFilter<
      [string, BigNumber[], number],
      {
        asset: string;
        monthlyEmissionPerSecond: BigNumber[];
        shareRatio: number;
      }
    >;

    AssetConfigUpdated(
      asset?: string | null,
      monthlyEmissionPerSecond?: null,
      shareRatio?: null
    ): TypedEventFilter<
      [string, BigNumber[], number],
      {
        asset: string;
        monthlyEmissionPerSecond: BigNumber[];
        shareRatio: number;
      }
    >;

    "AssetIndexUpdated(address,uint256)"(
      asset?: string | null,
      index?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { asset: string; index: BigNumber }
    >;

    AssetIndexUpdated(
      asset?: string | null,
      index?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { asset: string; index: BigNumber }
    >;

    "DelegateChanged(address,address,uint8)"(
      delegator?: string | null,
      delegatee?: string | null,
      delegationType?: null
    ): TypedEventFilter<
      [string, string, number],
      { delegator: string; delegatee: string; delegationType: number }
    >;

    DelegateChanged(
      delegator?: string | null,
      delegatee?: string | null,
      delegationType?: null
    ): TypedEventFilter<
      [string, string, number],
      { delegator: string; delegatee: string; delegationType: number }
    >;

    "DelegatedPowerChanged(address,uint256,uint8)"(
      user?: string | null,
      amount?: null,
      delegationType?: null
    ): TypedEventFilter<
      [string, BigNumber, number],
      { user: string; amount: BigNumber; delegationType: number }
    >;

    DelegatedPowerChanged(
      user?: string | null,
      amount?: null,
      delegationType?: null
    ): TypedEventFilter<
      [string, BigNumber, number],
      { user: string; amount: BigNumber; delegationType: number }
    >;

    "DistributionEndUpdated(uint256)"(
      newDistributionEnd?: null
    ): TypedEventFilter<[BigNumber], { newDistributionEnd: BigNumber }>;

    DistributionEndUpdated(
      newDistributionEnd?: null
    ): TypedEventFilter<[BigNumber], { newDistributionEnd: BigNumber }>;

    "DistributionStartUpdated(uint256)"(
      newDistributionStart?: null
    ): TypedEventFilter<[BigNumber], { newDistributionStart: BigNumber }>;

    DistributionStartUpdated(
      newDistributionStart?: null
    ): TypedEventFilter<[BigNumber], { newDistributionStart: BigNumber }>;

    "Heatup(address)"(
      user?: string | null
    ): TypedEventFilter<[string], { user: string }>;

    Heatup(user?: string | null): TypedEventFilter<[string], { user: string }>;

    "Redeem(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; amount: BigNumber }
    >;

    Redeem(
      from?: string | null,
      to?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; amount: BigNumber }
    >;

    "RewardsAccrued(address,uint256)"(
      user?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; amount: BigNumber }
    >;

    RewardsAccrued(
      user?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; amount: BigNumber }
    >;

    "RewardsClaimed(address,address,uint256,uint256)"(
      from?: string | null,
      to?: string | null,
      stakedTokenAmount?: null,
      governanceTokenAmount?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        from: string;
        to: string;
        stakedTokenAmount: BigNumber;
        governanceTokenAmount: BigNumber;
      }
    >;

    RewardsClaimed(
      from?: string | null,
      to?: string | null,
      stakedTokenAmount?: null,
      governanceTokenAmount?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        from: string;
        to: string;
        stakedTokenAmount: BigNumber;
        governanceTokenAmount: BigNumber;
      }
    >;

    "SetKlaybankGovernance(address)"(
      klaybankGovernance?: null
    ): TypedEventFilter<[string], { klaybankGovernance: string }>;

    SetKlaybankGovernance(
      klaybankGovernance?: null
    ): TypedEventFilter<[string], { klaybankGovernance: string }>;

    "Staked(address,address,uint256)"(
      from?: string | null,
      onBehalfOf?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; onBehalfOf: string; amount: BigNumber }
    >;

    Staked(
      from?: string | null,
      onBehalfOf?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; onBehalfOf: string; amount: BigNumber }
    >;

    "StakedTokenRewardRatioChanged(uint16)"(
      stakedTokenReward?: null
    ): TypedEventFilter<[number], { stakedTokenReward: number }>;

    StakedTokenRewardRatioChanged(
      stakedTokenReward?: null
    ): TypedEventFilter<[number], { stakedTokenReward: number }>;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; value: BigNumber }
    >;

    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; value: BigNumber }
    >;

    "UserIndexUpdated(address,address,uint256)"(
      user?: string | null,
      asset?: string | null,
      index?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { user: string; asset: string; index: BigNumber }
    >;

    UserIndexUpdated(
      user?: string | null,
      asset?: string | null,
      index?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { user: string; asset: string; index: BigNumber }
    >;
  };

  estimateGas: {
    DELEGATE_BY_TYPE_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    DELEGATE_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    EIP712_REVISION(overrides?: CallOverrides): Promise<BigNumber>;

    EMISSION_MANAGER(overrides?: CallOverrides): Promise<BigNumber>;

    GOVERNANCE_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

    HEATUP_SECONDS(overrides?: CallOverrides): Promise<BigNumber>;

    PERCENTAGE_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    REVISION(overrides?: CallOverrides): Promise<BigNumber>;

    REWARDS_VAULT(overrides?: CallOverrides): Promise<BigNumber>;

    SECONDS_OF_ONE_MONTH(overrides?: CallOverrides): Promise<BigNumber>;

    UNSTAKE_WINDOW(overrides?: CallOverrides): Promise<BigNumber>;

    _klaybankGovernance(overrides?: CallOverrides): Promise<BigNumber>;

    _nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    _votingSnapshots(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _votingSnapshotsCounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    assets(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    claimRewards(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    configureAsset(
      monthlyEmissionPerSecond: BigNumberish[],
      shareRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    delegate(
      delegatee: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    delegateBySig(
      delegatee: string,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    delegateByType(
      delegatee: string,
      delegationType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    delegateByTypeBySig(
      delegatee: string,
      delegationType: BigNumberish,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAssetData(asset: string, overrides?: CallOverrides): Promise<BigNumber>;

    getDelegateeByType(
      delegator: string,
      delegationType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDistributionEndTimestamp(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDistributionStartTimestamp(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNextHeatupTimestamp(
      fromHeatupTimestamp: BigNumberish,
      amountToReceive: BigNumberish,
      toAddress: string,
      toBalance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPowerAtBlock(
      user: string,
      blockNumber: BigNumberish,
      delegationType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPowerCurrent(
      user: string,
      delegationType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakedTokenRewardRatio(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalRewardsBalance(
      staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserAssetData(
      user: string,
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    heatup(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      klaybankGovernance: string,
      tokenName: string,
      tokenSymbol: string,
      tokenDecimals: BigNumberish,
      stakedTokenAddress: string,
      stakedTokenRewardRatio: BigNumberish,
      chainId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeem(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDistributionStartTimestamp(
      asset: string,
      distributionStartTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setKlaybankGovernance(
      klaybankGovernance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStakedTokenRewardRatio(
      stakedTokenRewardRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stake(
      onBehalfOf: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakeAndActivateHeatup(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakedToken(overrides?: CallOverrides): Promise<BigNumber>;

    stakerRewardsToClaim(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakersHeatups(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupplyAt(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DELEGATE_BY_TYPE_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DELEGATE_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    EIP712_REVISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    EMISSION_MANAGER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    GOVERNANCE_TOKEN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    HEATUP_SECONDS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PERCENTAGE_FACTOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    REVISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    REWARDS_VAULT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SECONDS_OF_ONE_MONTH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    UNSTAKE_WINDOW(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _klaybankGovernance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _nonces(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _votingSnapshots(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _votingSnapshotsCounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    assets(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimRewards(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    configureAsset(
      monthlyEmissionPerSecond: BigNumberish[],
      shareRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    delegate(
      delegatee: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    delegateBySig(
      delegatee: string,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    delegateByType(
      delegatee: string,
      delegationType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    delegateByTypeBySig(
      delegatee: string,
      delegationType: BigNumberish,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAssetData(
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDelegateeByType(
      delegator: string,
      delegationType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDistributionEndTimestamp(
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDistributionStartTimestamp(
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNextHeatupTimestamp(
      fromHeatupTimestamp: BigNumberish,
      amountToReceive: BigNumberish,
      toAddress: string,
      toBalance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPowerAtBlock(
      user: string,
      blockNumber: BigNumberish,
      delegationType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPowerCurrent(
      user: string,
      delegationType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakedTokenRewardRatio(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalRewardsBalance(
      staker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserAssetData(
      user: string,
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    heatup(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      klaybankGovernance: string,
      tokenName: string,
      tokenSymbol: string,
      tokenDecimals: BigNumberish,
      stakedTokenAddress: string,
      stakedTokenRewardRatio: BigNumberish,
      chainId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeem(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDistributionStartTimestamp(
      asset: string,
      distributionStartTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setKlaybankGovernance(
      klaybankGovernance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStakedTokenRewardRatio(
      stakedTokenRewardRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stake(
      onBehalfOf: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakeAndActivateHeatup(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakedToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakerRewardsToClaim(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakersHeatups(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupplyAt(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
