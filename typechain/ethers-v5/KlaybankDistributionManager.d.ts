/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface KlaybankDistributionManagerInterface extends ethers.utils.Interface {
  functions: {
    "EMISSION_MANAGER()": FunctionFragment;
    "PERCENTAGE_FACTOR()": FunctionFragment;
    "PRECISION()": FunctionFragment;
    "SECONDS_OF_ONE_MONTH()": FunctionFragment;
    "assets(address)": FunctionFragment;
    "getAssetData(address)": FunctionFragment;
    "getDistributionEndTimestamp(address)": FunctionFragment;
    "getDistributionStartTimestamp(address)": FunctionFragment;
    "getUserAssetData(address,address)": FunctionFragment;
    "setDistributionStartTimestamp(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "EMISSION_MANAGER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERCENTAGE_FACTOR",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "PRECISION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "SECONDS_OF_ONE_MONTH",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "assets", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getAssetData",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getDistributionEndTimestamp",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getDistributionStartTimestamp",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserAssetData",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setDistributionStartTimestamp",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "EMISSION_MANAGER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERCENTAGE_FACTOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "PRECISION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "SECONDS_OF_ONE_MONTH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "assets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAssetData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDistributionEndTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDistributionStartTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserAssetData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDistributionStartTimestamp",
    data: BytesLike
  ): Result;

  events: {
    "AssetConfigUpdated(address,uint256[],uint16)": EventFragment;
    "AssetIndexUpdated(address,uint256)": EventFragment;
    "DistributionEndUpdated(uint256)": EventFragment;
    "DistributionStartUpdated(uint256)": EventFragment;
    "UserIndexUpdated(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AssetConfigUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssetIndexUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DistributionEndUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DistributionStartUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserIndexUpdated"): EventFragment;
}

export type AssetConfigUpdatedEvent = TypedEvent<
  [string, BigNumber[], number] & {
    asset: string;
    monthlyEmissionPerSecond: BigNumber[];
    shareRatio: number;
  }
>;

export type AssetIndexUpdatedEvent = TypedEvent<
  [string, BigNumber] & { asset: string; index: BigNumber }
>;

export type DistributionEndUpdatedEvent = TypedEvent<
  [BigNumber] & { newDistributionEnd: BigNumber }
>;

export type DistributionStartUpdatedEvent = TypedEvent<
  [BigNumber] & { newDistributionStart: BigNumber }
>;

export type UserIndexUpdatedEvent = TypedEvent<
  [string, string, BigNumber] & {
    user: string;
    asset: string;
    index: BigNumber;
  }
>;

export class KlaybankDistributionManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: KlaybankDistributionManagerInterface;

  functions: {
    EMISSION_MANAGER(overrides?: CallOverrides): Promise<[string]>;

    PERCENTAGE_FACTOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    PRECISION(overrides?: CallOverrides): Promise<[number]>;

    SECONDS_OF_ONE_MONTH(overrides?: CallOverrides): Promise<[BigNumber]>;

    assets(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, BigNumber, BigNumber] & {
        index: BigNumber;
        shareRatio: number;
        lastUpdateTimestamp: BigNumber;
        distributionStartTimestamp: BigNumber;
      }
    >;

    getAssetData(
      asset: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber[], number, BigNumber, BigNumber]>;

    getDistributionEndTimestamp(
      asset: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getDistributionStartTimestamp(
      asset: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUserAssetData(
      user: string,
      asset: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setDistributionStartTimestamp(
      asset: string,
      distributionStartTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  EMISSION_MANAGER(overrides?: CallOverrides): Promise<string>;

  PERCENTAGE_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

  PRECISION(overrides?: CallOverrides): Promise<number>;

  SECONDS_OF_ONE_MONTH(overrides?: CallOverrides): Promise<BigNumber>;

  assets(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number, BigNumber, BigNumber] & {
      index: BigNumber;
      shareRatio: number;
      lastUpdateTimestamp: BigNumber;
      distributionStartTimestamp: BigNumber;
    }
  >;

  getAssetData(
    asset: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber[], number, BigNumber, BigNumber]>;

  getDistributionEndTimestamp(
    asset: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDistributionStartTimestamp(
    asset: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUserAssetData(
    user: string,
    asset: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setDistributionStartTimestamp(
    asset: string,
    distributionStartTimestamp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    EMISSION_MANAGER(overrides?: CallOverrides): Promise<string>;

    PERCENTAGE_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

    PRECISION(overrides?: CallOverrides): Promise<number>;

    SECONDS_OF_ONE_MONTH(overrides?: CallOverrides): Promise<BigNumber>;

    assets(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, BigNumber, BigNumber] & {
        index: BigNumber;
        shareRatio: number;
        lastUpdateTimestamp: BigNumber;
        distributionStartTimestamp: BigNumber;
      }
    >;

    getAssetData(
      asset: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber[], number, BigNumber, BigNumber]>;

    getDistributionEndTimestamp(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDistributionStartTimestamp(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserAssetData(
      user: string,
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setDistributionStartTimestamp(
      asset: string,
      distributionStartTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AssetConfigUpdated(address,uint256[],uint16)"(
      asset?: string | null,
      monthlyEmissionPerSecond?: null,
      shareRatio?: null
    ): TypedEventFilter<
      [string, BigNumber[], number],
      {
        asset: string;
        monthlyEmissionPerSecond: BigNumber[];
        shareRatio: number;
      }
    >;

    AssetConfigUpdated(
      asset?: string | null,
      monthlyEmissionPerSecond?: null,
      shareRatio?: null
    ): TypedEventFilter<
      [string, BigNumber[], number],
      {
        asset: string;
        monthlyEmissionPerSecond: BigNumber[];
        shareRatio: number;
      }
    >;

    "AssetIndexUpdated(address,uint256)"(
      asset?: string | null,
      index?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { asset: string; index: BigNumber }
    >;

    AssetIndexUpdated(
      asset?: string | null,
      index?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { asset: string; index: BigNumber }
    >;

    "DistributionEndUpdated(uint256)"(
      newDistributionEnd?: null
    ): TypedEventFilter<[BigNumber], { newDistributionEnd: BigNumber }>;

    DistributionEndUpdated(
      newDistributionEnd?: null
    ): TypedEventFilter<[BigNumber], { newDistributionEnd: BigNumber }>;

    "DistributionStartUpdated(uint256)"(
      newDistributionStart?: null
    ): TypedEventFilter<[BigNumber], { newDistributionStart: BigNumber }>;

    DistributionStartUpdated(
      newDistributionStart?: null
    ): TypedEventFilter<[BigNumber], { newDistributionStart: BigNumber }>;

    "UserIndexUpdated(address,address,uint256)"(
      user?: string | null,
      asset?: string | null,
      index?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { user: string; asset: string; index: BigNumber }
    >;

    UserIndexUpdated(
      user?: string | null,
      asset?: string | null,
      index?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { user: string; asset: string; index: BigNumber }
    >;
  };

  estimateGas: {
    EMISSION_MANAGER(overrides?: CallOverrides): Promise<BigNumber>;

    PERCENTAGE_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

    PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    SECONDS_OF_ONE_MONTH(overrides?: CallOverrides): Promise<BigNumber>;

    assets(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    getAssetData(asset: string, overrides?: CallOverrides): Promise<BigNumber>;

    getDistributionEndTimestamp(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDistributionStartTimestamp(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserAssetData(
      user: string,
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setDistributionStartTimestamp(
      asset: string,
      distributionStartTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    EMISSION_MANAGER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PERCENTAGE_FACTOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SECONDS_OF_ONE_MONTH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    assets(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAssetData(
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDistributionEndTimestamp(
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDistributionStartTimestamp(
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserAssetData(
      user: string,
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setDistributionStartTimestamp(
      asset: string,
      distributionStartTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
