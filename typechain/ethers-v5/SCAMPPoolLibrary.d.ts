/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface SCAMPPoolLibraryInterface extends ethers.utils.Interface {
  functions: {
    "calcMint1t1SCAMP(uint256,uint256)": FunctionFragment;
    "calcMintAlgorithmicSCAMP(uint256,uint256)": FunctionFragment;
    "calcRecollateralizeSCAMPInner(uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "calcRedeem1t1SCAMP(uint256,uint256)": FunctionFragment;
    "recollateralizeAmount(uint256,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "calcMint1t1SCAMP",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calcMintAlgorithmicSCAMP",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calcRecollateralizeSCAMPInner",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calcRedeem1t1SCAMP",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "recollateralizeAmount",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "calcMint1t1SCAMP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcMintAlgorithmicSCAMP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcRecollateralizeSCAMPInner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcRedeem1t1SCAMP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recollateralizeAmount",
    data: BytesLike
  ): Result;

  events: {};
}

export class SCAMPPoolLibrary extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: SCAMPPoolLibraryInterface;

  functions: {
    calcMint1t1SCAMP(
      col_price: BigNumberish,
      collateral_amount_d18: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calcMintAlgorithmicSCAMP(
      CAMP_price_usd: BigNumberish,
      CAMP_amount_d18: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calcRecollateralizeSCAMPInner(
      collateral_amount: BigNumberish,
      col_price: BigNumberish,
      global_collat_value: BigNumberish,
      SCAMP_total_supply: BigNumberish,
      global_collateral_ratio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    calcRedeem1t1SCAMP(
      col_price_usd: BigNumberish,
      SCAMP_amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    recollateralizeAmount(
      total_supply: BigNumberish,
      global_collateral_ratio: BigNumberish,
      global_collat_value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  calcMint1t1SCAMP(
    col_price: BigNumberish,
    collateral_amount_d18: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcMintAlgorithmicSCAMP(
    CAMP_price_usd: BigNumberish,
    CAMP_amount_d18: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcRecollateralizeSCAMPInner(
    collateral_amount: BigNumberish,
    col_price: BigNumberish,
    global_collat_value: BigNumberish,
    SCAMP_total_supply: BigNumberish,
    global_collateral_ratio: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  calcRedeem1t1SCAMP(
    col_price_usd: BigNumberish,
    SCAMP_amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  recollateralizeAmount(
    total_supply: BigNumberish,
    global_collateral_ratio: BigNumberish,
    global_collat_value: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    calcMint1t1SCAMP(
      col_price: BigNumberish,
      collateral_amount_d18: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcMintAlgorithmicSCAMP(
      CAMP_price_usd: BigNumberish,
      CAMP_amount_d18: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcRecollateralizeSCAMPInner(
      collateral_amount: BigNumberish,
      col_price: BigNumberish,
      global_collat_value: BigNumberish,
      SCAMP_total_supply: BigNumberish,
      global_collateral_ratio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    calcRedeem1t1SCAMP(
      col_price_usd: BigNumberish,
      SCAMP_amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    recollateralizeAmount(
      total_supply: BigNumberish,
      global_collateral_ratio: BigNumberish,
      global_collat_value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    calcMint1t1SCAMP(
      col_price: BigNumberish,
      collateral_amount_d18: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcMintAlgorithmicSCAMP(
      CAMP_price_usd: BigNumberish,
      CAMP_amount_d18: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcRecollateralizeSCAMPInner(
      collateral_amount: BigNumberish,
      col_price: BigNumberish,
      global_collat_value: BigNumberish,
      SCAMP_total_supply: BigNumberish,
      global_collateral_ratio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcRedeem1t1SCAMP(
      col_price_usd: BigNumberish,
      SCAMP_amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    recollateralizeAmount(
      total_supply: BigNumberish,
      global_collateral_ratio: BigNumberish,
      global_collat_value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    calcMint1t1SCAMP(
      col_price: BigNumberish,
      collateral_amount_d18: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcMintAlgorithmicSCAMP(
      CAMP_price_usd: BigNumberish,
      CAMP_amount_d18: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcRecollateralizeSCAMPInner(
      collateral_amount: BigNumberish,
      col_price: BigNumberish,
      global_collat_value: BigNumberish,
      SCAMP_total_supply: BigNumberish,
      global_collateral_ratio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcRedeem1t1SCAMP(
      col_price_usd: BigNumberish,
      SCAMP_amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    recollateralizeAmount(
      total_supply: BigNumberish,
      global_collateral_ratio: BigNumberish,
      global_collat_value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
