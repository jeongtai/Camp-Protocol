/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { SwapToPrice, SwapToPriceInterface } from "../SwapToPrice";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "factory_",
        type: "address",
      },
      {
        internalType: "contract IUniswapV2Router01",
        name: "router_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "truePriceTokenA",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "truePriceTokenB",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "reserveA",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "reserveB",
        type: "uint256",
      },
    ],
    name: "computeProfitMaximizingTrade",
    outputs: [
      {
        internalType: "bool",
        name: "aToB",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "factory",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "router",
    outputs: [
      {
        internalType: "contract IUniswapV2Router01",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenA",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenB",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "truePriceTokenA",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "truePriceTokenB",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "maxSpendTokenA",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "maxSpendTokenB",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
    ],
    name: "swapToPrice",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60c060405234801561001057600080fd5b50604051610df2380380610df28339818101604052604081101561003357600080fd5b5080516020909101516001600160601b0319606092831b811660a052911b1660805260805160601c60a05160601c610d6561008d600039806101e652806104c1525080610276528061031952806104e55250610d656000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063bef90fd314610051578063c45a0155146100a8578063f887ea40146100cc578063fa653154146100d4575b600080fd5b6100a6600480360361010081101561006857600080fd5b506001600160a01b038135811691602081013582169160408201359160608101359160808201359160a08101359160c0820135169060e0013561011e565b005b6100b06104bf565b604080516001600160a01b039092168252519081900360200190f35b6100b06104e3565b610103600480360360808110156100ea57600080fd5b5080359060208101359060408101359060600135610507565b60408051921515835260208301919091528051918290030190f35b851580159061012c57508415155b61017d576040805162461bcd60e51b815260206004820152601e60248201527f4578616d706c6553776170546f50726963653a205a45524f5f50524943450000604482015290519081900360640190fd5b8315158061018a57508215155b6101db576040805162461bcd60e51b815260206004820152601e60248201527f4578616d706c6553776170546f50726963653a205a45524f5f5350454e440000604482015290519081900360640190fd5b60008060008061020c7f00000000000000000000000000000000000000000000000000000000000000008d8d6105c2565b9150915061021c8a8a8484610507565b9094509250600091508390506102325785610234565b865b905080821115610242578091505b60008361024f578a610251565b8b5b9050600084610260578c610262565b8b5b905061027082333087610690565b61029b827f00000000000000000000000000000000000000000000000000000000000000008661081b565b604080516002808252606080830184529260208301908036833701905050905082816000815181106102c957fe5b60200260200101906001600160a01b031690816001600160a01b03168152505081816001815181106102f757fe5b60200260200101906001600160a01b031690816001600160a01b0316815250507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166338ed1739866000848c8c6040518663ffffffff1660e01b81526004018086815260200185815260200180602001846001600160a01b03168152602001838152602001828103825285818151815260200191508051906020019060200280838360005b838110156103bc5781810151838201526020016103a4565b505050509050019650505050505050600060405180830381600087803b1580156103e557600080fd5b505af11580156103f9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561042257600080fd5b810190808051604051939291908464010000000082111561044257600080fd5b90830190602082018581111561045757600080fd5b825186602082028301116401000000008211171561047457600080fd5b82525081516020918201928201910280838360005b838110156104a1578181015183820152602001610489565b50505050905001604052505050505050505050505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b600080858361051686886109b3565b8161051d57fe5b04109150600061052d85856109b3565b9050600061057761054d6103e586610545578a610547565b895b906109b3565b61056a6103e861054788610561578b610563565b8c5b87906109b3565b8161057157fe5b04610a15565b905060006103e5856105945761058f876103e86109b3565b6105a0565b6105a0886103e86109b3565b816105a757fe5b0490506105b48282610a67565b935050505094509492505050565b60008060006105d18585610aa9565b5090506000806105e2888888610b87565b6001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561061a57600080fd5b505afa15801561062e573d6000803e3d6000fd5b505050506040513d606081101561064457600080fd5b5080516020909101516dffffffffffffffffffffffffffff91821693501690506001600160a01b038781169084161461067e578082610681565b81815b90999098509650505050505050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017815292518251600094606094938a169392918291908083835b602083106107435780518252601f199092019160209182019101610724565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146107a5576040519150601f19603f3d011682016040523d82523d6000602084013e6107aa565b606091505b50915091508180156107d85750805115806107d857508080602001905160208110156107d557600080fd5b50515b6108135760405162461bcd60e51b8152600401808060200182810382526024815260200180610d0c6024913960400191505060405180910390fd5b505050505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f095ea7b300000000000000000000000000000000000000000000000000000000178152925182516000946060949389169392918291908083835b602083106108c65780518252601f1990920191602091820191016108a7565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114610928576040519150601f19603f3d011682016040523d82523d6000602084013e61092d565b606091505b509150915081801561095b57508051158061095b575080806020019051602081101561095857600080fd5b50515b6109ac576040805162461bcd60e51b815260206004820152601e60248201527f5472616e7366657248656c7065723a20415050524f56455f4641494c45440000604482015290519081900360640190fd5b5050505050565b6000826109c257506000610a0f565b828202828482816109cf57fe5b0414610a0c5760405162461bcd60e51b8152600401808060200182810382526021815260200180610ceb6021913960400191505060405180910390fd5b90505b92915050565b60006003821115610a58575080600160028204015b81811015610a5257809150600281828581610a4157fe5b040181610a4a57fe5b049050610a2a565b50610a62565b8115610a62575060015b919050565b6000610a0c83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610c2e565b600080826001600160a01b0316846001600160a01b03161415610afd5760405162461bcd60e51b8152600401808060200182810382526025815260200180610cc66025913960400191505060405180910390fd5b826001600160a01b0316846001600160a01b031610610b1d578284610b20565b83835b90925090506001600160a01b038216610b80576040805162461bcd60e51b815260206004820152601e60248201527f556e697377617056324c6962726172793a205a45524f5f414444524553530000604482015290519081900360640190fd5b9250929050565b6000806000610b968585610aa9565b91509150856001600160a01b031663e6a4390583836040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b031681526020019250505060206040518083038186803b158015610bf857600080fd5b505afa158015610c0c573d6000803e3d6000fd5b505050506040513d6020811015610c2257600080fd5b50519695505050505050565b60008184841115610cbd5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610c82578181015183820152602001610c6a565b50505050905090810190601f168015610caf5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50505090039056fe556e697377617056324c6962726172793a204944454e544943414c5f414444524553534553536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775472616e7366657248656c7065723a205452414e534645525f46524f4d5f4641494c4544a264697066735822122024a62aad9cea30098871e5663964c664106a1d1f1378a018773596bf824b2d3064736f6c63430007050033";

export class SwapToPrice__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    factory_: string,
    router_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<SwapToPrice> {
    return super.deploy(
      factory_,
      router_,
      overrides || {}
    ) as Promise<SwapToPrice>;
  }
  getDeployTransaction(
    factory_: string,
    router_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(factory_, router_, overrides || {});
  }
  attach(address: string): SwapToPrice {
    return super.attach(address) as SwapToPrice;
  }
  connect(signer: Signer): SwapToPrice__factory {
    return super.connect(signer) as SwapToPrice__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SwapToPriceInterface {
    return new utils.Interface(_abi) as SwapToPriceInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SwapToPrice {
    return new Contract(address, _abi, signerOrProvider) as SwapToPrice;
  }
}
