/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface WUSDPoolInterface extends ethers.utils.Interface {
  functions: {
    "acceptOwnership()": FunctionFragment;
    "availableExcessCollatDV()": FunctionFragment;
    "bonus_rate()": FunctionFragment;
    "buyBackWMF(uint256,uint256)": FunctionFragment;
    "buyback_fee()": FunctionFragment;
    "collatDollarBalance()": FunctionFragment;
    "collat_eth_oracle_address()": FunctionFragment;
    "collectRedemption()": FunctionFragment;
    "getCollateralPrice()": FunctionFragment;
    "lastRedeemed(address)": FunctionFragment;
    "mint1t1WUSD(uint256,uint256)": FunctionFragment;
    "mintAlgorithmicWUSD(uint256,uint256)": FunctionFragment;
    "mintFractionalWUSD(uint256,uint256,uint256)": FunctionFragment;
    "mintPaused()": FunctionFragment;
    "minting_fee()": FunctionFragment;
    "nominateNewOwner(address)": FunctionFragment;
    "nominatedOwner()": FunctionFragment;
    "owner()": FunctionFragment;
    "pausedPrice()": FunctionFragment;
    "pool_ceiling()": FunctionFragment;
    "recollat_fee()": FunctionFragment;
    "recollateralizeWUSD(uint256,uint256)": FunctionFragment;
    "redeem1t1WUSD(uint256,uint256)": FunctionFragment;
    "redeemAlgorithmicWUSD(uint256,uint256)": FunctionFragment;
    "redeemCollateralBalances(address)": FunctionFragment;
    "redeemFractionalWUSD(uint256,uint256,uint256)": FunctionFragment;
    "redeemPaused()": FunctionFragment;
    "redeemWMFBalances(address)": FunctionFragment;
    "redemption_delay()": FunctionFragment;
    "redemption_fee()": FunctionFragment;
    "setCollatETHOracle(address,address)": FunctionFragment;
    "setPoolParameters(uint256,uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "toggleMinting()": FunctionFragment;
    "toggleRedeeming()": FunctionFragment;
    "unclaimedPoolCollateral()": FunctionFragment;
    "unclaimedPoolWMF()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "availableExcessCollatDV",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bonus_rate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyBackWMF",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyback_fee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collatDollarBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collat_eth_oracle_address",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collectRedemption",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateralPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastRedeemed",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "mint1t1WUSD",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintAlgorithmicWUSD",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintFractionalWUSD",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintPaused",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minting_fee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nominateNewOwner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "nominatedOwner",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pausedPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pool_ceiling",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "recollat_fee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "recollateralizeWUSD",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeem1t1WUSD",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemAlgorithmicWUSD",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemCollateralBalances",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemFractionalWUSD",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemPaused",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeemWMFBalances",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "redemption_delay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redemption_fee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCollatETHOracle",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolParameters",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "toggleMinting",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "toggleRedeeming",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unclaimedPoolCollateral",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unclaimedPoolWMF",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "availableExcessCollatDV",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bonus_rate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyBackWMF", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyback_fee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collatDollarBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collat_eth_oracle_address",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectRedemption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateralPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastRedeemed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mint1t1WUSD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintAlgorithmicWUSD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintFractionalWUSD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintPaused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minting_fee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nominateNewOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nominatedOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pausedPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pool_ceiling",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recollat_fee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recollateralizeWUSD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeem1t1WUSD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemAlgorithmicWUSD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemCollateralBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemFractionalWUSD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemWMFBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redemption_delay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redemption_fee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCollatETHOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPoolParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleMinting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleRedeeming",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unclaimedPoolCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unclaimedPoolWMF",
    data: BytesLike
  ): Result;

  events: {
    "MintingToggled(bool)": EventFragment;
    "OwnerChanged(address,address)": EventFragment;
    "OwnerNominated(address)": EventFragment;
    "PoolParametersSet(uint256,uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "RedeemingToggled(bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MintingToggled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerNominated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolParametersSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RedeemingToggled"): EventFragment;
}

export type MintingToggledEvent = TypedEvent<[boolean] & { toggled: boolean }>;

export type OwnerChangedEvent = TypedEvent<
  [string, string] & { oldOwner: string; newOwner: string }
>;

export type OwnerNominatedEvent = TypedEvent<[string] & { newOwner: string }>;

export type PoolParametersSetEvent = TypedEvent<
  [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    new_ceiling: BigNumber;
    new_bonus_rate: BigNumber;
    new_redemption_delay: BigNumber;
    new_mint_fee: BigNumber;
    new_redeem_fee: BigNumber;
    new_buyback_fee: BigNumber;
    new_recollat_fee: BigNumber;
  }
>;

export type RedeemingToggledEvent = TypedEvent<
  [boolean] & { toggled: boolean }
>;

export class WUSDPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: WUSDPoolInterface;

  functions: {
    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    availableExcessCollatDV(overrides?: CallOverrides): Promise<[BigNumber]>;

    bonus_rate(overrides?: CallOverrides): Promise<[BigNumber]>;

    buyBackWMF(
      WMF_amount: BigNumberish,
      COLLATERAL_out_min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyback_fee(overrides?: CallOverrides): Promise<[BigNumber]>;

    collatDollarBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    collat_eth_oracle_address(overrides?: CallOverrides): Promise<[string]>;

    collectRedemption(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getCollateralPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastRedeemed(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    mint1t1WUSD(
      collateral_amount: BigNumberish,
      WUSD_out_min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintAlgorithmicWUSD(
      WMF_amount_d18: BigNumberish,
      WUSD_out_min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintFractionalWUSD(
      collateral_amount: BigNumberish,
      WMF_amount: BigNumberish,
      WUSD_out_min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintPaused(overrides?: CallOverrides): Promise<[boolean]>;

    minting_fee(overrides?: CallOverrides): Promise<[BigNumber]>;

    nominateNewOwner(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nominatedOwner(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pausedPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    pool_ceiling(overrides?: CallOverrides): Promise<[BigNumber]>;

    recollat_fee(overrides?: CallOverrides): Promise<[BigNumber]>;

    recollateralizeWUSD(
      collateral_amount: BigNumberish,
      WMF_out_min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeem1t1WUSD(
      WUSD_amount: BigNumberish,
      COLLATERAL_out_min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeemAlgorithmicWUSD(
      WUSD_amount: BigNumberish,
      WMF_out_min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeemCollateralBalances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    redeemFractionalWUSD(
      WUSD_amount: BigNumberish,
      WMF_out_min: BigNumberish,
      COLLATERAL_out_min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeemPaused(overrides?: CallOverrides): Promise<[boolean]>;

    redeemWMFBalances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    redemption_delay(overrides?: CallOverrides): Promise<[BigNumber]>;

    redemption_fee(overrides?: CallOverrides): Promise<[BigNumber]>;

    setCollatETHOracle(
      _collateral_weth_oracle_address: string,
      _weth_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPoolParameters(
      new_ceiling: BigNumberish,
      new_bonus_rate: BigNumberish,
      new_redemption_delay: BigNumberish,
      new_mint_fee: BigNumberish,
      new_redeem_fee: BigNumberish,
      new_buyback_fee: BigNumberish,
      new_recollat_fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    toggleMinting(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    toggleRedeeming(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unclaimedPoolCollateral(overrides?: CallOverrides): Promise<[BigNumber]>;

    unclaimedPoolWMF(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  acceptOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  availableExcessCollatDV(overrides?: CallOverrides): Promise<BigNumber>;

  bonus_rate(overrides?: CallOverrides): Promise<BigNumber>;

  buyBackWMF(
    WMF_amount: BigNumberish,
    COLLATERAL_out_min: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyback_fee(overrides?: CallOverrides): Promise<BigNumber>;

  collatDollarBalance(overrides?: CallOverrides): Promise<BigNumber>;

  collat_eth_oracle_address(overrides?: CallOverrides): Promise<string>;

  collectRedemption(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getCollateralPrice(overrides?: CallOverrides): Promise<BigNumber>;

  lastRedeemed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  mint1t1WUSD(
    collateral_amount: BigNumberish,
    WUSD_out_min: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintAlgorithmicWUSD(
    WMF_amount_d18: BigNumberish,
    WUSD_out_min: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintFractionalWUSD(
    collateral_amount: BigNumberish,
    WMF_amount: BigNumberish,
    WUSD_out_min: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintPaused(overrides?: CallOverrides): Promise<boolean>;

  minting_fee(overrides?: CallOverrides): Promise<BigNumber>;

  nominateNewOwner(
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nominatedOwner(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pausedPrice(overrides?: CallOverrides): Promise<BigNumber>;

  pool_ceiling(overrides?: CallOverrides): Promise<BigNumber>;

  recollat_fee(overrides?: CallOverrides): Promise<BigNumber>;

  recollateralizeWUSD(
    collateral_amount: BigNumberish,
    WMF_out_min: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeem1t1WUSD(
    WUSD_amount: BigNumberish,
    COLLATERAL_out_min: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeemAlgorithmicWUSD(
    WUSD_amount: BigNumberish,
    WMF_out_min: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeemCollateralBalances(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  redeemFractionalWUSD(
    WUSD_amount: BigNumberish,
    WMF_out_min: BigNumberish,
    COLLATERAL_out_min: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeemPaused(overrides?: CallOverrides): Promise<boolean>;

  redeemWMFBalances(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  redemption_delay(overrides?: CallOverrides): Promise<BigNumber>;

  redemption_fee(overrides?: CallOverrides): Promise<BigNumber>;

  setCollatETHOracle(
    _collateral_weth_oracle_address: string,
    _weth_address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPoolParameters(
    new_ceiling: BigNumberish,
    new_bonus_rate: BigNumberish,
    new_redemption_delay: BigNumberish,
    new_mint_fee: BigNumberish,
    new_redeem_fee: BigNumberish,
    new_buyback_fee: BigNumberish,
    new_recollat_fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  toggleMinting(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  toggleRedeeming(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unclaimedPoolCollateral(overrides?: CallOverrides): Promise<BigNumber>;

  unclaimedPoolWMF(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    availableExcessCollatDV(overrides?: CallOverrides): Promise<BigNumber>;

    bonus_rate(overrides?: CallOverrides): Promise<BigNumber>;

    buyBackWMF(
      WMF_amount: BigNumberish,
      COLLATERAL_out_min: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    buyback_fee(overrides?: CallOverrides): Promise<BigNumber>;

    collatDollarBalance(overrides?: CallOverrides): Promise<BigNumber>;

    collat_eth_oracle_address(overrides?: CallOverrides): Promise<string>;

    collectRedemption(overrides?: CallOverrides): Promise<void>;

    getCollateralPrice(overrides?: CallOverrides): Promise<BigNumber>;

    lastRedeemed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    mint1t1WUSD(
      collateral_amount: BigNumberish,
      WUSD_out_min: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    mintAlgorithmicWUSD(
      WMF_amount_d18: BigNumberish,
      WUSD_out_min: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    mintFractionalWUSD(
      collateral_amount: BigNumberish,
      WMF_amount: BigNumberish,
      WUSD_out_min: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    mintPaused(overrides?: CallOverrides): Promise<boolean>;

    minting_fee(overrides?: CallOverrides): Promise<BigNumber>;

    nominateNewOwner(_owner: string, overrides?: CallOverrides): Promise<void>;

    nominatedOwner(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pausedPrice(overrides?: CallOverrides): Promise<BigNumber>;

    pool_ceiling(overrides?: CallOverrides): Promise<BigNumber>;

    recollat_fee(overrides?: CallOverrides): Promise<BigNumber>;

    recollateralizeWUSD(
      collateral_amount: BigNumberish,
      WMF_out_min: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    redeem1t1WUSD(
      WUSD_amount: BigNumberish,
      COLLATERAL_out_min: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    redeemAlgorithmicWUSD(
      WUSD_amount: BigNumberish,
      WMF_out_min: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    redeemCollateralBalances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeemFractionalWUSD(
      WUSD_amount: BigNumberish,
      WMF_out_min: BigNumberish,
      COLLATERAL_out_min: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    redeemPaused(overrides?: CallOverrides): Promise<boolean>;

    redeemWMFBalances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redemption_delay(overrides?: CallOverrides): Promise<BigNumber>;

    redemption_fee(overrides?: CallOverrides): Promise<BigNumber>;

    setCollatETHOracle(
      _collateral_weth_oracle_address: string,
      _weth_address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPoolParameters(
      new_ceiling: BigNumberish,
      new_bonus_rate: BigNumberish,
      new_redemption_delay: BigNumberish,
      new_mint_fee: BigNumberish,
      new_redeem_fee: BigNumberish,
      new_buyback_fee: BigNumberish,
      new_recollat_fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    toggleMinting(overrides?: CallOverrides): Promise<void>;

    toggleRedeeming(overrides?: CallOverrides): Promise<void>;

    unclaimedPoolCollateral(overrides?: CallOverrides): Promise<BigNumber>;

    unclaimedPoolWMF(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "MintingToggled(bool)"(
      toggled?: null
    ): TypedEventFilter<[boolean], { toggled: boolean }>;

    MintingToggled(
      toggled?: null
    ): TypedEventFilter<[boolean], { toggled: boolean }>;

    "OwnerChanged(address,address)"(
      oldOwner?: null,
      newOwner?: null
    ): TypedEventFilter<
      [string, string],
      { oldOwner: string; newOwner: string }
    >;

    OwnerChanged(
      oldOwner?: null,
      newOwner?: null
    ): TypedEventFilter<
      [string, string],
      { oldOwner: string; newOwner: string }
    >;

    "OwnerNominated(address)"(
      newOwner?: null
    ): TypedEventFilter<[string], { newOwner: string }>;

    OwnerNominated(
      newOwner?: null
    ): TypedEventFilter<[string], { newOwner: string }>;

    "PoolParametersSet(uint256,uint256,uint256,uint256,uint256,uint256,uint256)"(
      new_ceiling?: null,
      new_bonus_rate?: null,
      new_redemption_delay?: null,
      new_mint_fee?: null,
      new_redeem_fee?: null,
      new_buyback_fee?: null,
      new_recollat_fee?: null
    ): TypedEventFilter<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        new_ceiling: BigNumber;
        new_bonus_rate: BigNumber;
        new_redemption_delay: BigNumber;
        new_mint_fee: BigNumber;
        new_redeem_fee: BigNumber;
        new_buyback_fee: BigNumber;
        new_recollat_fee: BigNumber;
      }
    >;

    PoolParametersSet(
      new_ceiling?: null,
      new_bonus_rate?: null,
      new_redemption_delay?: null,
      new_mint_fee?: null,
      new_redeem_fee?: null,
      new_buyback_fee?: null,
      new_recollat_fee?: null
    ): TypedEventFilter<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        new_ceiling: BigNumber;
        new_bonus_rate: BigNumber;
        new_redemption_delay: BigNumber;
        new_mint_fee: BigNumber;
        new_redeem_fee: BigNumber;
        new_buyback_fee: BigNumber;
        new_recollat_fee: BigNumber;
      }
    >;

    "RedeemingToggled(bool)"(
      toggled?: null
    ): TypedEventFilter<[boolean], { toggled: boolean }>;

    RedeemingToggled(
      toggled?: null
    ): TypedEventFilter<[boolean], { toggled: boolean }>;
  };

  estimateGas: {
    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    availableExcessCollatDV(overrides?: CallOverrides): Promise<BigNumber>;

    bonus_rate(overrides?: CallOverrides): Promise<BigNumber>;

    buyBackWMF(
      WMF_amount: BigNumberish,
      COLLATERAL_out_min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyback_fee(overrides?: CallOverrides): Promise<BigNumber>;

    collatDollarBalance(overrides?: CallOverrides): Promise<BigNumber>;

    collat_eth_oracle_address(overrides?: CallOverrides): Promise<BigNumber>;

    collectRedemption(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getCollateralPrice(overrides?: CallOverrides): Promise<BigNumber>;

    lastRedeemed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    mint1t1WUSD(
      collateral_amount: BigNumberish,
      WUSD_out_min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintAlgorithmicWUSD(
      WMF_amount_d18: BigNumberish,
      WUSD_out_min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintFractionalWUSD(
      collateral_amount: BigNumberish,
      WMF_amount: BigNumberish,
      WUSD_out_min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintPaused(overrides?: CallOverrides): Promise<BigNumber>;

    minting_fee(overrides?: CallOverrides): Promise<BigNumber>;

    nominateNewOwner(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nominatedOwner(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pausedPrice(overrides?: CallOverrides): Promise<BigNumber>;

    pool_ceiling(overrides?: CallOverrides): Promise<BigNumber>;

    recollat_fee(overrides?: CallOverrides): Promise<BigNumber>;

    recollateralizeWUSD(
      collateral_amount: BigNumberish,
      WMF_out_min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeem1t1WUSD(
      WUSD_amount: BigNumberish,
      COLLATERAL_out_min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeemAlgorithmicWUSD(
      WUSD_amount: BigNumberish,
      WMF_out_min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeemCollateralBalances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeemFractionalWUSD(
      WUSD_amount: BigNumberish,
      WMF_out_min: BigNumberish,
      COLLATERAL_out_min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeemPaused(overrides?: CallOverrides): Promise<BigNumber>;

    redeemWMFBalances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redemption_delay(overrides?: CallOverrides): Promise<BigNumber>;

    redemption_fee(overrides?: CallOverrides): Promise<BigNumber>;

    setCollatETHOracle(
      _collateral_weth_oracle_address: string,
      _weth_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPoolParameters(
      new_ceiling: BigNumberish,
      new_bonus_rate: BigNumberish,
      new_redemption_delay: BigNumberish,
      new_mint_fee: BigNumberish,
      new_redeem_fee: BigNumberish,
      new_buyback_fee: BigNumberish,
      new_recollat_fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    toggleMinting(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    toggleRedeeming(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unclaimedPoolCollateral(overrides?: CallOverrides): Promise<BigNumber>;

    unclaimedPoolWMF(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    availableExcessCollatDV(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bonus_rate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buyBackWMF(
      WMF_amount: BigNumberish,
      COLLATERAL_out_min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyback_fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collatDollarBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collat_eth_oracle_address(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collectRedemption(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getCollateralPrice(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastRedeemed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint1t1WUSD(
      collateral_amount: BigNumberish,
      WUSD_out_min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintAlgorithmicWUSD(
      WMF_amount_d18: BigNumberish,
      WUSD_out_min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintFractionalWUSD(
      collateral_amount: BigNumberish,
      WMF_amount: BigNumberish,
      WUSD_out_min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minting_fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nominateNewOwner(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nominatedOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pausedPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pool_ceiling(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recollat_fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recollateralizeWUSD(
      collateral_amount: BigNumberish,
      WMF_out_min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeem1t1WUSD(
      WUSD_amount: BigNumberish,
      COLLATERAL_out_min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeemAlgorithmicWUSD(
      WUSD_amount: BigNumberish,
      WMF_out_min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeemCollateralBalances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    redeemFractionalWUSD(
      WUSD_amount: BigNumberish,
      WMF_out_min: BigNumberish,
      COLLATERAL_out_min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeemPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeemWMFBalances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    redemption_delay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redemption_fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setCollatETHOracle(
      _collateral_weth_oracle_address: string,
      _weth_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPoolParameters(
      new_ceiling: BigNumberish,
      new_bonus_rate: BigNumberish,
      new_redemption_delay: BigNumberish,
      new_mint_fee: BigNumberish,
      new_redeem_fee: BigNumberish,
      new_buyback_fee: BigNumberish,
      new_recollat_fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    toggleMinting(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    toggleRedeeming(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unclaimedPoolCollateral(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unclaimedPoolWMF(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
