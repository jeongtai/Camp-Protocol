/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface SCAMPInterface extends ethers.utils.Interface {
  functions: {
    "Bank_burn_from(address,uint256)": FunctionFragment;
    "Bank_mint(address,uint256)": FunctionFragment;
    "CAMP_address()": FunctionFragment;
    "CAMP_klay_oracle_address()": FunctionFragment;
    "CAMP_price()": FunctionFragment;
    "KLAY_usdt_price()": FunctionFragment;
    "Klay_Usdt_oracle_address()": FunctionFragment;
    "SCAMPBank()": FunctionFragment;
    "SCAMP_info()": FunctionFragment;
    "SCAMP_klay_oracle_address()": FunctionFragment;
    "SCAMP_price()": FunctionFragment;
    "SCAMP_step()": FunctionFragment;
    "acceptOwnership()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "collateral_ratio_paused()": FunctionFragment;
    "controller_address()": FunctionFragment;
    "creator_address()": FunctionFragment;
    "current_collateral_ratio()": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "default_admin_address()": FunctionFragment;
    "genesis_supply()": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "klay_address()": FunctionFragment;
    "last_call_time()": FunctionFragment;
    "minting_fee()": FunctionFragment;
    "name()": FunctionFragment;
    "nominateNewOwner(address)": FunctionFragment;
    "nominatedOwner()": FunctionFragment;
    "owner()": FunctionFragment;
    "price_band()": FunctionFragment;
    "price_target()": FunctionFragment;
    "redemption_fee()": FunctionFragment;
    "refreshCollateralRatio()": FunctionFragment;
    "refresh_cooldown()": FunctionFragment;
    "setBankAddress(address)": FunctionFragment;
    "setCAMPAddress(address)": FunctionFragment;
    "setCAMPKlayOracle(address,address)": FunctionFragment;
    "setController(address)": FunctionFragment;
    "setKlayUSDTOracle(address,address)": FunctionFragment;
    "setMintingFee(uint256)": FunctionFragment;
    "setPriceBand(uint256)": FunctionFragment;
    "setPriceTarget(uint256)": FunctionFragment;
    "setRedemptionFee(uint256)": FunctionFragment;
    "setRefreshCooldown(uint256)": FunctionFragment;
    "setSCAMPKlayOracle(address,address)": FunctionFragment;
    "setSCAMPStep(uint256)": FunctionFragment;
    "symbol()": FunctionFragment;
    "toggleCollateralRatio()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "usdt_address()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "Bank_burn_from",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "Bank_mint",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "CAMP_address",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CAMP_klay_oracle_address",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CAMP_price",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "KLAY_usdt_price",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "Klay_Usdt_oracle_address",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "SCAMPBank", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "SCAMP_info",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SCAMP_klay_oracle_address",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SCAMP_price",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SCAMP_step",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "collateral_ratio_paused",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "controller_address",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "creator_address",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "current_collateral_ratio",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "default_admin_address",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "genesis_supply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "klay_address",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "last_call_time",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minting_fee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nominateNewOwner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "nominatedOwner",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "price_band",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "price_target",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redemption_fee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "refreshCollateralRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "refresh_cooldown",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBankAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setCAMPAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setCAMPKlayOracle",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setController",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setKlayUSDTOracle",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMintingFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceBand",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceTarget",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRedemptionFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRefreshCooldown",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSCAMPKlayOracle",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setSCAMPStep",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "toggleCollateralRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "usdt_address",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "Bank_burn_from",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "Bank_mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "CAMP_address",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CAMP_klay_oracle_address",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "CAMP_price", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "KLAY_usdt_price",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "Klay_Usdt_oracle_address",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "SCAMPBank", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "SCAMP_info", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "SCAMP_klay_oracle_address",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SCAMP_price",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "SCAMP_step", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collateral_ratio_paused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "controller_address",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creator_address",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "current_collateral_ratio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "default_admin_address",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "genesis_supply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "klay_address",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "last_call_time",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minting_fee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nominateNewOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nominatedOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "price_band", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "price_target",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redemption_fee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "refreshCollateralRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "refresh_cooldown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBankAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCAMPAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCAMPKlayOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setKlayUSDTOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMintingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceBand",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceTarget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRedemptionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRefreshCooldown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSCAMPKlayOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSCAMPStep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "toggleCollateralRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "usdt_address",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "BankAddressSet(address)": EventFragment;
    "CAMPAddressSet(address)": EventFragment;
    "CAMPKLAYOracleSet(address,address)": EventFragment;
    "CollateralRatioRefreshed(uint256)": EventFragment;
    "CollateralRatioToggled(bool)": EventFragment;
    "ControllerSet(address)": EventFragment;
    "KLAYUSDTOracleSet(address,address)": EventFragment;
    "MintingFeeSet(uint256)": EventFragment;
    "OwnerChanged(address,address)": EventFragment;
    "OwnerNominated(address)": EventFragment;
    "PriceBandSet(uint256)": EventFragment;
    "PriceTargetSet(uint256)": EventFragment;
    "RedemptionFeeSet(uint256)": EventFragment;
    "RefreshCooldownSet(uint256)": EventFragment;
    "SCAMPBurned(address,address,uint256)": EventFragment;
    "SCAMPKLAYOracleSet(address,address)": EventFragment;
    "SCAMPMinted(address,address,uint256)": EventFragment;
    "SCAMPStepSet(uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BankAddressSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CAMPAddressSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CAMPKLAYOracleSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CollateralRatioRefreshed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CollateralRatioToggled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ControllerSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "KLAYUSDTOracleSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MintingFeeSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerNominated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceBandSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceTargetSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RedemptionFeeSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RefreshCooldownSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SCAMPBurned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SCAMPKLAYOracleSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SCAMPMinted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SCAMPStepSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber] & {
    owner: string;
    spender: string;
    value: BigNumber;
  }
>;

export type BankAddressSetEvent = TypedEvent<
  [string] & { Bank_address: string }
>;

export type CAMPAddressSetEvent = TypedEvent<
  [string] & { CAMP_address: string }
>;

export type CAMPKLAYOracleSetEvent = TypedEvent<
  [string, string] & { CAMP_oracle_addr: string; klay_address: string }
>;

export type CollateralRatioRefreshedEvent = TypedEvent<
  [BigNumber] & { current_collateral_ratio: BigNumber }
>;

export type CollateralRatioToggledEvent = TypedEvent<
  [boolean] & { collateral_ratio_paused: boolean }
>;

export type ControllerSetEvent = TypedEvent<
  [string] & { controller_address: string }
>;

export type KLAYUSDTOracleSetEvent = TypedEvent<
  [string, string] & { Klay_oracle_addr: string; klay_address: string }
>;

export type MintingFeeSetEvent = TypedEvent<
  [BigNumber] & { min_fee: BigNumber }
>;

export type OwnerChangedEvent = TypedEvent<
  [string, string] & { oldOwner: string; newOwner: string }
>;

export type OwnerNominatedEvent = TypedEvent<[string] & { newOwner: string }>;

export type PriceBandSetEvent = TypedEvent<
  [BigNumber] & { price_band: BigNumber }
>;

export type PriceTargetSetEvent = TypedEvent<
  [BigNumber] & { new_price_target: BigNumber }
>;

export type RedemptionFeeSetEvent = TypedEvent<
  [BigNumber] & { red_fee: BigNumber }
>;

export type RefreshCooldownSetEvent = TypedEvent<
  [BigNumber] & { new_cooldown: BigNumber }
>;

export type SCAMPBurnedEvent = TypedEvent<
  [string, string, BigNumber] & { from: string; to: string; amount: BigNumber }
>;

export type SCAMPKLAYOracleSetEvent = TypedEvent<
  [string, string] & { SCAMP_oracle_addr: string; klay_address: string }
>;

export type SCAMPMintedEvent = TypedEvent<
  [string, string, BigNumber] & { from: string; to: string; amount: BigNumber }
>;

export type SCAMPStepSetEvent = TypedEvent<
  [BigNumber] & { new_step: BigNumber }
>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber] & { from: string; to: string; value: BigNumber }
>;

export class SCAMP extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: SCAMPInterface;

  functions: {
    Bank_burn_from(
      b_address: string,
      b_amoount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    Bank_mint(
      m_address: string,
      m_amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    CAMP_address(overrides?: CallOverrides): Promise<[string]>;

    CAMP_klay_oracle_address(overrides?: CallOverrides): Promise<[string]>;

    CAMP_price(overrides?: CallOverrides): Promise<[BigNumber]>;

    KLAY_usdt_price(overrides?: CallOverrides): Promise<[BigNumber]>;

    Klay_Usdt_oracle_address(overrides?: CallOverrides): Promise<[string]>;

    SCAMPBank(overrides?: CallOverrides): Promise<[string]>;

    SCAMP_info(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

    SCAMP_klay_oracle_address(overrides?: CallOverrides): Promise<[string]>;

    SCAMP_price(overrides?: CallOverrides): Promise<[BigNumber]>;

    SCAMP_step(overrides?: CallOverrides): Promise<[BigNumber]>;

    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    collateral_ratio_paused(overrides?: CallOverrides): Promise<[boolean]>;

    controller_address(overrides?: CallOverrides): Promise<[string]>;

    creator_address(overrides?: CallOverrides): Promise<[string]>;

    current_collateral_ratio(overrides?: CallOverrides): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    default_admin_address(overrides?: CallOverrides): Promise<[string]>;

    genesis_supply(overrides?: CallOverrides): Promise<[BigNumber]>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    klay_address(overrides?: CallOverrides): Promise<[string]>;

    last_call_time(overrides?: CallOverrides): Promise<[BigNumber]>;

    minting_fee(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nominateNewOwner(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nominatedOwner(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    price_band(overrides?: CallOverrides): Promise<[BigNumber]>;

    price_target(overrides?: CallOverrides): Promise<[BigNumber]>;

    redemption_fee(overrides?: CallOverrides): Promise<[BigNumber]>;

    refreshCollateralRatio(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    refresh_cooldown(overrides?: CallOverrides): Promise<[BigNumber]>;

    setBankAddress(
      _Bank_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCAMPAddress(
      _CAMP_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCAMPKlayOracle(
      _CAMP_oracle_addr: string,
      _klay_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setController(
      _controller_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setKlayUSDTOracle(
      _Klay_oracle_addr: string,
      _USDT_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMintingFee(
      mint_fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPriceBand(
      _price_band: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPriceTarget(
      _new_price_target: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRedemptionFee(
      red_fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRefreshCooldown(
      _new_cooldown: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSCAMPKlayOracle(
      _SCAMP_oracle_addr: string,
      _klay_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSCAMPStep(
      _new_step: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    toggleCollateralRatio(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    usdt_address(overrides?: CallOverrides): Promise<[string]>;
  };

  Bank_burn_from(
    b_address: string,
    b_amoount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  Bank_mint(
    m_address: string,
    m_amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  CAMP_address(overrides?: CallOverrides): Promise<string>;

  CAMP_klay_oracle_address(overrides?: CallOverrides): Promise<string>;

  CAMP_price(overrides?: CallOverrides): Promise<BigNumber>;

  KLAY_usdt_price(overrides?: CallOverrides): Promise<BigNumber>;

  Klay_Usdt_oracle_address(overrides?: CallOverrides): Promise<string>;

  SCAMPBank(overrides?: CallOverrides): Promise<string>;

  SCAMP_info(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

  SCAMP_klay_oracle_address(overrides?: CallOverrides): Promise<string>;

  SCAMP_price(overrides?: CallOverrides): Promise<BigNumber>;

  SCAMP_step(overrides?: CallOverrides): Promise<BigNumber>;

  acceptOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  collateral_ratio_paused(overrides?: CallOverrides): Promise<boolean>;

  controller_address(overrides?: CallOverrides): Promise<string>;

  creator_address(overrides?: CallOverrides): Promise<string>;

  current_collateral_ratio(overrides?: CallOverrides): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  default_admin_address(overrides?: CallOverrides): Promise<string>;

  genesis_supply(overrides?: CallOverrides): Promise<BigNumber>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  klay_address(overrides?: CallOverrides): Promise<string>;

  last_call_time(overrides?: CallOverrides): Promise<BigNumber>;

  minting_fee(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  nominateNewOwner(
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nominatedOwner(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  price_band(overrides?: CallOverrides): Promise<BigNumber>;

  price_target(overrides?: CallOverrides): Promise<BigNumber>;

  redemption_fee(overrides?: CallOverrides): Promise<BigNumber>;

  refreshCollateralRatio(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  refresh_cooldown(overrides?: CallOverrides): Promise<BigNumber>;

  setBankAddress(
    _Bank_address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCAMPAddress(
    _CAMP_address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCAMPKlayOracle(
    _CAMP_oracle_addr: string,
    _klay_address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setController(
    _controller_address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setKlayUSDTOracle(
    _Klay_oracle_addr: string,
    _USDT_address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMintingFee(
    mint_fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPriceBand(
    _price_band: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPriceTarget(
    _new_price_target: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRedemptionFee(
    red_fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRefreshCooldown(
    _new_cooldown: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSCAMPKlayOracle(
    _SCAMP_oracle_addr: string,
    _klay_address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSCAMPStep(
    _new_step: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  toggleCollateralRatio(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  usdt_address(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    Bank_burn_from(
      b_address: string,
      b_amoount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    Bank_mint(
      m_address: string,
      m_amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    CAMP_address(overrides?: CallOverrides): Promise<string>;

    CAMP_klay_oracle_address(overrides?: CallOverrides): Promise<string>;

    CAMP_price(overrides?: CallOverrides): Promise<BigNumber>;

    KLAY_usdt_price(overrides?: CallOverrides): Promise<BigNumber>;

    Klay_Usdt_oracle_address(overrides?: CallOverrides): Promise<string>;

    SCAMPBank(overrides?: CallOverrides): Promise<string>;

    SCAMP_info(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

    SCAMP_klay_oracle_address(overrides?: CallOverrides): Promise<string>;

    SCAMP_price(overrides?: CallOverrides): Promise<BigNumber>;

    SCAMP_step(overrides?: CallOverrides): Promise<BigNumber>;

    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    collateral_ratio_paused(overrides?: CallOverrides): Promise<boolean>;

    controller_address(overrides?: CallOverrides): Promise<string>;

    creator_address(overrides?: CallOverrides): Promise<string>;

    current_collateral_ratio(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    default_admin_address(overrides?: CallOverrides): Promise<string>;

    genesis_supply(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    klay_address(overrides?: CallOverrides): Promise<string>;

    last_call_time(overrides?: CallOverrides): Promise<BigNumber>;

    minting_fee(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    nominateNewOwner(_owner: string, overrides?: CallOverrides): Promise<void>;

    nominatedOwner(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    price_band(overrides?: CallOverrides): Promise<BigNumber>;

    price_target(overrides?: CallOverrides): Promise<BigNumber>;

    redemption_fee(overrides?: CallOverrides): Promise<BigNumber>;

    refreshCollateralRatio(overrides?: CallOverrides): Promise<void>;

    refresh_cooldown(overrides?: CallOverrides): Promise<BigNumber>;

    setBankAddress(
      _Bank_address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setCAMPAddress(
      _CAMP_address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setCAMPKlayOracle(
      _CAMP_oracle_addr: string,
      _klay_address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setController(
      _controller_address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setKlayUSDTOracle(
      _Klay_oracle_addr: string,
      _USDT_address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMintingFee(
      mint_fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPriceBand(
      _price_band: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPriceTarget(
      _new_price_target: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRedemptionFee(
      red_fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRefreshCooldown(
      _new_cooldown: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSCAMPKlayOracle(
      _SCAMP_oracle_addr: string,
      _klay_address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setSCAMPStep(
      _new_step: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    toggleCollateralRatio(overrides?: CallOverrides): Promise<void>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    usdt_address(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; spender: string; value: BigNumber }
    >;

    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; spender: string; value: BigNumber }
    >;

    "BankAddressSet(address)"(
      Bank_address?: null
    ): TypedEventFilter<[string], { Bank_address: string }>;

    BankAddressSet(
      Bank_address?: null
    ): TypedEventFilter<[string], { Bank_address: string }>;

    "CAMPAddressSet(address)"(
      CAMP_address?: null
    ): TypedEventFilter<[string], { CAMP_address: string }>;

    CAMPAddressSet(
      CAMP_address?: null
    ): TypedEventFilter<[string], { CAMP_address: string }>;

    "CAMPKLAYOracleSet(address,address)"(
      CAMP_oracle_addr?: null,
      klay_address?: null
    ): TypedEventFilter<
      [string, string],
      { CAMP_oracle_addr: string; klay_address: string }
    >;

    CAMPKLAYOracleSet(
      CAMP_oracle_addr?: null,
      klay_address?: null
    ): TypedEventFilter<
      [string, string],
      { CAMP_oracle_addr: string; klay_address: string }
    >;

    "CollateralRatioRefreshed(uint256)"(
      current_collateral_ratio?: null
    ): TypedEventFilter<[BigNumber], { current_collateral_ratio: BigNumber }>;

    CollateralRatioRefreshed(
      current_collateral_ratio?: null
    ): TypedEventFilter<[BigNumber], { current_collateral_ratio: BigNumber }>;

    "CollateralRatioToggled(bool)"(
      collateral_ratio_paused?: null
    ): TypedEventFilter<[boolean], { collateral_ratio_paused: boolean }>;

    CollateralRatioToggled(
      collateral_ratio_paused?: null
    ): TypedEventFilter<[boolean], { collateral_ratio_paused: boolean }>;

    "ControllerSet(address)"(
      controller_address?: null
    ): TypedEventFilter<[string], { controller_address: string }>;

    ControllerSet(
      controller_address?: null
    ): TypedEventFilter<[string], { controller_address: string }>;

    "KLAYUSDTOracleSet(address,address)"(
      Klay_oracle_addr?: null,
      klay_address?: null
    ): TypedEventFilter<
      [string, string],
      { Klay_oracle_addr: string; klay_address: string }
    >;

    KLAYUSDTOracleSet(
      Klay_oracle_addr?: null,
      klay_address?: null
    ): TypedEventFilter<
      [string, string],
      { Klay_oracle_addr: string; klay_address: string }
    >;

    "MintingFeeSet(uint256)"(
      min_fee?: null
    ): TypedEventFilter<[BigNumber], { min_fee: BigNumber }>;

    MintingFeeSet(
      min_fee?: null
    ): TypedEventFilter<[BigNumber], { min_fee: BigNumber }>;

    "OwnerChanged(address,address)"(
      oldOwner?: null,
      newOwner?: null
    ): TypedEventFilter<
      [string, string],
      { oldOwner: string; newOwner: string }
    >;

    OwnerChanged(
      oldOwner?: null,
      newOwner?: null
    ): TypedEventFilter<
      [string, string],
      { oldOwner: string; newOwner: string }
    >;

    "OwnerNominated(address)"(
      newOwner?: null
    ): TypedEventFilter<[string], { newOwner: string }>;

    OwnerNominated(
      newOwner?: null
    ): TypedEventFilter<[string], { newOwner: string }>;

    "PriceBandSet(uint256)"(
      price_band?: null
    ): TypedEventFilter<[BigNumber], { price_band: BigNumber }>;

    PriceBandSet(
      price_band?: null
    ): TypedEventFilter<[BigNumber], { price_band: BigNumber }>;

    "PriceTargetSet(uint256)"(
      new_price_target?: null
    ): TypedEventFilter<[BigNumber], { new_price_target: BigNumber }>;

    PriceTargetSet(
      new_price_target?: null
    ): TypedEventFilter<[BigNumber], { new_price_target: BigNumber }>;

    "RedemptionFeeSet(uint256)"(
      red_fee?: null
    ): TypedEventFilter<[BigNumber], { red_fee: BigNumber }>;

    RedemptionFeeSet(
      red_fee?: null
    ): TypedEventFilter<[BigNumber], { red_fee: BigNumber }>;

    "RefreshCooldownSet(uint256)"(
      new_cooldown?: null
    ): TypedEventFilter<[BigNumber], { new_cooldown: BigNumber }>;

    RefreshCooldownSet(
      new_cooldown?: null
    ): TypedEventFilter<[BigNumber], { new_cooldown: BigNumber }>;

    "SCAMPBurned(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; amount: BigNumber }
    >;

    SCAMPBurned(
      from?: string | null,
      to?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; amount: BigNumber }
    >;

    "SCAMPKLAYOracleSet(address,address)"(
      SCAMP_oracle_addr?: null,
      klay_address?: null
    ): TypedEventFilter<
      [string, string],
      { SCAMP_oracle_addr: string; klay_address: string }
    >;

    SCAMPKLAYOracleSet(
      SCAMP_oracle_addr?: null,
      klay_address?: null
    ): TypedEventFilter<
      [string, string],
      { SCAMP_oracle_addr: string; klay_address: string }
    >;

    "SCAMPMinted(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; amount: BigNumber }
    >;

    SCAMPMinted(
      from?: string | null,
      to?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; amount: BigNumber }
    >;

    "SCAMPStepSet(uint256)"(
      new_step?: null
    ): TypedEventFilter<[BigNumber], { new_step: BigNumber }>;

    SCAMPStepSet(
      new_step?: null
    ): TypedEventFilter<[BigNumber], { new_step: BigNumber }>;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; value: BigNumber }
    >;

    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; value: BigNumber }
    >;
  };

  estimateGas: {
    Bank_burn_from(
      b_address: string,
      b_amoount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    Bank_mint(
      m_address: string,
      m_amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    CAMP_address(overrides?: CallOverrides): Promise<BigNumber>;

    CAMP_klay_oracle_address(overrides?: CallOverrides): Promise<BigNumber>;

    CAMP_price(overrides?: CallOverrides): Promise<BigNumber>;

    KLAY_usdt_price(overrides?: CallOverrides): Promise<BigNumber>;

    Klay_Usdt_oracle_address(overrides?: CallOverrides): Promise<BigNumber>;

    SCAMPBank(overrides?: CallOverrides): Promise<BigNumber>;

    SCAMP_info(overrides?: CallOverrides): Promise<BigNumber>;

    SCAMP_klay_oracle_address(overrides?: CallOverrides): Promise<BigNumber>;

    SCAMP_price(overrides?: CallOverrides): Promise<BigNumber>;

    SCAMP_step(overrides?: CallOverrides): Promise<BigNumber>;

    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    collateral_ratio_paused(overrides?: CallOverrides): Promise<BigNumber>;

    controller_address(overrides?: CallOverrides): Promise<BigNumber>;

    creator_address(overrides?: CallOverrides): Promise<BigNumber>;

    current_collateral_ratio(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    default_admin_address(overrides?: CallOverrides): Promise<BigNumber>;

    genesis_supply(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    klay_address(overrides?: CallOverrides): Promise<BigNumber>;

    last_call_time(overrides?: CallOverrides): Promise<BigNumber>;

    minting_fee(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nominateNewOwner(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nominatedOwner(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    price_band(overrides?: CallOverrides): Promise<BigNumber>;

    price_target(overrides?: CallOverrides): Promise<BigNumber>;

    redemption_fee(overrides?: CallOverrides): Promise<BigNumber>;

    refreshCollateralRatio(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    refresh_cooldown(overrides?: CallOverrides): Promise<BigNumber>;

    setBankAddress(
      _Bank_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCAMPAddress(
      _CAMP_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCAMPKlayOracle(
      _CAMP_oracle_addr: string,
      _klay_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setController(
      _controller_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setKlayUSDTOracle(
      _Klay_oracle_addr: string,
      _USDT_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMintingFee(
      mint_fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPriceBand(
      _price_band: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPriceTarget(
      _new_price_target: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRedemptionFee(
      red_fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRefreshCooldown(
      _new_cooldown: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSCAMPKlayOracle(
      _SCAMP_oracle_addr: string,
      _klay_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSCAMPStep(
      _new_step: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    toggleCollateralRatio(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    usdt_address(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    Bank_burn_from(
      b_address: string,
      b_amoount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    Bank_mint(
      m_address: string,
      m_amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    CAMP_address(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CAMP_klay_oracle_address(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CAMP_price(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    KLAY_usdt_price(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    Klay_Usdt_oracle_address(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SCAMPBank(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SCAMP_info(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SCAMP_klay_oracle_address(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SCAMP_price(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SCAMP_step(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateral_ratio_paused(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    controller_address(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    creator_address(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    current_collateral_ratio(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    default_admin_address(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    genesis_supply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    klay_address(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    last_call_time(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minting_fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nominateNewOwner(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nominatedOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    price_band(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    price_target(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redemption_fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    refreshCollateralRatio(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    refresh_cooldown(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setBankAddress(
      _Bank_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCAMPAddress(
      _CAMP_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCAMPKlayOracle(
      _CAMP_oracle_addr: string,
      _klay_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setController(
      _controller_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setKlayUSDTOracle(
      _Klay_oracle_addr: string,
      _USDT_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMintingFee(
      mint_fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPriceBand(
      _price_band: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPriceTarget(
      _new_price_target: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRedemptionFee(
      red_fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRefreshCooldown(
      _new_cooldown: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSCAMPKlayOracle(
      _SCAMP_oracle_addr: string,
      _klay_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSCAMPStep(
      _new_step: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    toggleCollateralRatio(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    usdt_address(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
